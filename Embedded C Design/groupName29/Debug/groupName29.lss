
groupName29.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b6  00800100  00800100  00001ca4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e4  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000353  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000323  00000000  00000000  000028ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000326  00000000  00000000  00002dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000889  00000000  00000000  000030fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00003987  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
       8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
       c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      14:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      40:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      48:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      50:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      54:	0c 94 01 04 	jmp	0x802	; 0x802 <__vector_21>
      58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__vector_21+0xe2>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	6e 61       	ori	r22, 0x1E	; 30
      ec:	6e 00       	.word	0x006e	; ????

000000ee <__c.2177>:
      ee:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      fe:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1ae:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1be:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ce:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1de:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d8 e0       	ldi	r29, 0x08	; 8
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_clear_bss>:
     1f8:	22 e0       	ldi	r18, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <.do_clear_bss_start>

00000200 <.do_clear_bss_loop>:
     200:	1d 92       	st	X+, r1

00000202 <.do_clear_bss_start>:
     202:	a6 3b       	cpi	r26, 0xB6	; 182
     204:	b2 07       	cpc	r27, r18
     206:	e1 f7       	brne	.-8      	; 0x200 <.do_clear_bss_loop>
     208:	0e 94 87 04 	call	0x90e	; 0x90e <main>
     20c:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <_exit>

00000210 <__bad_interrupt>:
     210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000214 <usart_init>:
#include <util/delay.h>

//Setup registers for transmit
void usart_init(uint16_t MYUBRR){
	//Store UBBR
	UBRR0L = MYUBRR;
     214:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (MYUBRR >> 8);
     218:	90 93 c5 00 	sts	0x00C5, r25
	//Enable Transmitter
	UCSR0B |= (1<<TXEN0);
     21c:	e1 ec       	ldi	r30, 0xC1	; 193
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	88 60       	ori	r24, 0x08	; 8
     224:	80 83       	st	Z, r24
	//Enable Character Size
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
     226:	e2 ec       	ldi	r30, 0xC2	; 194
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	86 60       	ori	r24, 0x06	; 6
     22e:	80 83       	st	Z, r24
     230:	08 95       	ret

00000232 <usart_transmit>:
}

//Transmit data to CPLD
void usart_transmit(uint8_t data ){
	 //Polls until registers are empty then load data
	while (!(UCSR0A & (1<<UDRE0)));  
     232:	e0 ec       	ldi	r30, 0xC0	; 192
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	90 81       	ld	r25, Z
     238:	95 ff       	sbrs	r25, 5
     23a:	fd cf       	rjmp	.-6      	; 0x236 <usart_transmit+0x4>
	UDR0 = data; 
     23c:	80 93 c6 00 	sts	0x00C6, r24
     240:	08 95       	ret

00000242 <adc_init>:
}

//Setup registers for ADC
void adc_init (){
	ADMUX |= (1<<REFS0);
     242:	ec e7       	ldi	r30, 0x7C	; 124
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	80 64       	ori	r24, 0x40	; 64
     24a:	80 83       	st	Z, r24
			
	ADCSRA = (1<<ADEN) |	//Enable ADC
     24c:	8e ec       	ldi	r24, 0xCE	; 206
     24e:	80 93 7a 00 	sts	0x007A, r24
     252:	08 95       	ret

00000254 <calculate_voltage>:
}


//Calculate voltage read by ADC
double adc_calculate (int adc_value){	
	double Vin = (double) adc_value * 5;
     254:	bc 01       	movw	r22, r24
     256:	99 0f       	add	r25, r25
     258:	88 0b       	sbc	r24, r24
     25a:	99 0b       	sbc	r25, r25
     25c:	0e 94 c3 05 	call	0xb86	; 0xb86 <__floatsisf>
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	40 ea       	ldi	r20, 0xA0	; 160
     266:	50 e4       	ldi	r21, 0x40	; 64
     268:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
	Vin = Vin / 1024;
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	40 e8       	ldi	r20, 0x80	; 128
     272:	5a e3       	ldi	r21, 0x3A	; 58
     274:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
	return Vin;
}

//Calculate the voltage source
double calculate_voltage (int adc_value){
	return (adc_calculate(adc_value)-2.55)*10.15;
     278:	23 e3       	ldi	r18, 0x33	; 51
     27a:	33 e3       	ldi	r19, 0x33	; 51
     27c:	43 e2       	ldi	r20, 0x23	; 35
     27e:	50 e4       	ldi	r21, 0x40	; 64
     280:	0e 94 ac 04 	call	0x958	; 0x958 <__subsf3>
     284:	26 e6       	ldi	r18, 0x66	; 102
     286:	36 e6       	ldi	r19, 0x66	; 102
     288:	42 e2       	ldi	r20, 0x22	; 34
     28a:	51 e4       	ldi	r21, 0x41	; 65
     28c:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
}
     290:	08 95       	ret

00000292 <calculate_current>:
}


//Calculate voltage read by ADC
double adc_calculate (int adc_value){	
	double Vin = (double) adc_value * 5;
     292:	bc 01       	movw	r22, r24
     294:	99 0f       	add	r25, r25
     296:	88 0b       	sbc	r24, r24
     298:	99 0b       	sbc	r25, r25
     29a:	0e 94 c3 05 	call	0xb86	; 0xb86 <__floatsisf>
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 ea       	ldi	r20, 0xA0	; 160
     2a4:	50 e4       	ldi	r21, 0x40	; 64
     2a6:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
	Vin = Vin / 1024;
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e8       	ldi	r20, 0x80	; 128
     2b0:	5a e3       	ldi	r21, 0x3A	; 58
     2b2:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
	return (adc_calculate(adc_value)-2.55)*10.15;
}

//Calculate the voltage of the shunt 
double calculate_current (int adc_value){
	return (adc_calculate(adc_value)-2.55)/(5.62/3);
     2b6:	23 e3       	ldi	r18, 0x33	; 51
     2b8:	33 e3       	ldi	r19, 0x33	; 51
     2ba:	43 e2       	ldi	r20, 0x23	; 35
     2bc:	50 e4       	ldi	r21, 0x40	; 64
     2be:	0e 94 ac 04 	call	0x958	; 0x958 <__subsf3>
     2c2:	23 e6       	ldi	r18, 0x63	; 99
     2c4:	39 ec       	ldi	r19, 0xC9	; 201
     2c6:	4f ee       	ldi	r20, 0xEF	; 239
     2c8:	5f e3       	ldi	r21, 0x3F	; 63
     2ca:	0e 94 19 05 	call	0xa32	; 0xa32 <__divsf3>
}
     2ce:	08 95       	ret

000002d0 <dp_index>:

// Calculate position of the decimal point
int dp_index(double value){
	int positionDp = 0;
	int number = (int)value;
     2d0:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fixsfsi>
	//Case for when value is 0
	if (number == 0) {
     2d4:	61 15       	cp	r22, r1
     2d6:	71 05       	cpc	r23, r1
     2d8:	91 f0       	breq	.+36     	; 0x2fe <dp_index+0x2e>
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
		return 3;
	} else {
		while (number!=0) {
			positionDp++;
			number/=10;
     2de:	ea e0       	ldi	r30, 0x0A	; 10
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
	//Case for when value is 0
	if (number == 0) {
		return 3;
	} else {
		while (number!=0) {
			positionDp++;
     2e2:	2f 5f       	subi	r18, 0xFF	; 255
     2e4:	3f 4f       	sbci	r19, 0xFF	; 255
			number/=10;
     2e6:	cb 01       	movw	r24, r22
     2e8:	bf 01       	movw	r22, r30
     2ea:	0e 94 33 0c 	call	0x1866	; 0x1866 <__divmodhi4>
	int number = (int)value;
	//Case for when value is 0
	if (number == 0) {
		return 3;
	} else {
		while (number!=0) {
     2ee:	61 15       	cp	r22, r1
     2f0:	71 05       	cpc	r23, r1
     2f2:	b9 f7       	brne	.-18     	; 0x2e2 <dp_index+0x12>
			positionDp++;
			number/=10;
		}
		return 4-positionDp;
     2f4:	84 e0       	ldi	r24, 0x04	; 4
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	82 1b       	sub	r24, r18
     2fa:	93 0b       	sbc	r25, r19
     2fc:	08 95       	ret
int dp_index(double value){
	int positionDp = 0;
	int number = (int)value;
	//Case for when value is 0
	if (number == 0) {
		return 3;
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	90 e0       	ldi	r25, 0x00	; 0
			positionDp++;
			number/=10;
		}
		return 4-positionDp;
	}
}
     302:	08 95       	ret

00000304 <transmit_values>:

// Transmit each digit separately and decimal point if needed
void transmit_values(int parameter, double value){
     304:	2f 92       	push	r2
     306:	3f 92       	push	r3
     308:	5f 92       	push	r5
     30a:	6f 92       	push	r6
     30c:	7f 92       	push	r7
     30e:	8f 92       	push	r8
     310:	9f 92       	push	r9
     312:	af 92       	push	r10
     314:	bf 92       	push	r11
     316:	cf 92       	push	r12
     318:	df 92       	push	r13
     31a:	ef 92       	push	r14
     31c:	ff 92       	push	r15
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	00 d0       	rcall	.+0      	; 0x328 <transmit_values+0x24>
     328:	00 d0       	rcall	.+0      	; 0x32a <transmit_values+0x26>
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	78 2e       	mov	r7, r24
     330:	4a 01       	movw	r8, r20
     332:	5b 01       	movw	r10, r22
	int dp_value= dp_index (value);
     334:	cb 01       	movw	r24, r22
     336:	ba 01       	movw	r22, r20
     338:	0e 94 68 01 	call	0x2d0	; 0x2d0 <dp_index>
     33c:	6c 01       	movw	r12, r24
	int number = value * pow(10,dp_value);
     33e:	bc 01       	movw	r22, r24
     340:	99 0f       	add	r25, r25
     342:	88 0b       	sbc	r24, r24
     344:	99 0b       	sbc	r25, r25
     346:	0e 94 c3 05 	call	0xb86	; 0xb86 <__floatsisf>
     34a:	9b 01       	movw	r18, r22
     34c:	ac 01       	movw	r20, r24
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	80 e2       	ldi	r24, 0x20	; 32
     354:	91 e4       	ldi	r25, 0x41	; 65
     356:	0e 94 c1 06 	call	0xd82	; 0xd82 <pow>
     35a:	69 83       	std	Y+1, r22	; 0x01
     35c:	7a 83       	std	Y+2, r23	; 0x02
     35e:	8b 83       	std	Y+3, r24	; 0x03
     360:	9c 83       	std	Y+4, r25	; 0x04

	//Capping the maximum value that can be displayed
	if(value > 999){
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 ec       	ldi	r19, 0xC0	; 192
     366:	49 e7       	ldi	r20, 0x79	; 121
     368:	54 e4       	ldi	r21, 0x44	; 68
     36a:	c5 01       	movw	r24, r10
     36c:	b4 01       	movw	r22, r8
     36e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__gesf2>
     372:	18 16       	cp	r1, r24
     374:	74 f0       	brlt	.+28     	; 0x392 <transmit_values+0x8e>
}

// Transmit each digit separately and decimal point if needed
void transmit_values(int parameter, double value){
	int dp_value= dp_index (value);
	int number = value * pow(10,dp_value);
     376:	a5 01       	movw	r20, r10
     378:	94 01       	movw	r18, r8
     37a:	69 81       	ldd	r22, Y+1	; 0x01
     37c:	7a 81       	ldd	r23, Y+2	; 0x02
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
     386:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fixsfsi>
     38a:	cb 01       	movw	r24, r22
		number = 9999;
	}

	//Transmit each digit in a data frame
	int position = 0;
	while (number!=0){
     38c:	00 97       	sbiw	r24, 0x00	; 0
     38e:	19 f4       	brne	.+6      	; 0x396 <transmit_values+0x92>
     390:	29 c0       	rjmp	.+82     	; 0x3e4 <transmit_values+0xe0>
	int dp_value= dp_index (value);
	int number = value * pow(10,dp_value);

	//Capping the maximum value that can be displayed
	if(value > 999){
		number = 9999;
     392:	8f e0       	ldi	r24, 0x0F	; 15
     394:	97 e2       	ldi	r25, 0x27	; 39
     396:	21 2c       	mov	r2, r1
     398:	31 2c       	mov	r3, r1
	}

	//Transmit each digit in a data frame
	int position = 0;
	while (number!=0){
		usart_transmit((number%10)+parameter+position); //parameter relates to bits7:6, position relates to bits 5:4
     39a:	67 2c       	mov	r6, r7
     39c:	0f 2e       	mov	r0, r31
     39e:	fa e0       	ldi	r31, 0x0A	; 10
     3a0:	ef 2e       	mov	r14, r31
     3a2:	f1 2c       	mov	r15, r1
     3a4:	f0 2d       	mov	r31, r0
     3a6:	b7 01       	movw	r22, r14
     3a8:	0e 94 33 0c 	call	0x1866	; 0x1866 <__divmodhi4>
     3ac:	06 2f       	mov	r16, r22
     3ae:	17 2f       	mov	r17, r23
     3b0:	92 2d       	mov	r25, r2
     3b2:	97 0d       	add	r25, r7
     3b4:	89 0f       	add	r24, r25
     3b6:	0e 94 19 01 	call	0x232	; 0x232 <usart_transmit>
		number/=10;
     3ba:	80 2f       	mov	r24, r16
     3bc:	91 2f       	mov	r25, r17
		position+=16;	//Change position in data frame
     3be:	20 e1       	ldi	r18, 0x10	; 16
     3c0:	22 0e       	add	r2, r18
     3c2:	31 1c       	adc	r3, r1
		number = 9999;
	}

	//Transmit each digit in a data frame
	int position = 0;
	while (number!=0){
     3c4:	00 97       	sbiw	r24, 0x00	; 0
     3c6:	79 f7       	brne	.-34     	; 0x3a6 <transmit_values+0xa2>
		usart_transmit((number%10)+parameter+position); //parameter relates to bits7:6, position relates to bits 5:4
		number/=10;
		position+=16;	//Change position in data frame
	}
	//Transmit a zero if the number is less than 3sf
	if (((int)value ==0) && (position == 48)) {
     3c8:	c5 01       	movw	r24, r10
     3ca:	b4 01       	movw	r22, r8
     3cc:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fixsfsi>
     3d0:	67 2b       	or	r22, r23
     3d2:	41 f4       	brne	.+16     	; 0x3e4 <transmit_values+0xe0>
     3d4:	80 e3       	ldi	r24, 0x30	; 48
     3d6:	28 16       	cp	r2, r24
     3d8:	31 04       	cpc	r3, r1
     3da:	21 f4       	brne	.+8      	; 0x3e4 <transmit_values+0xe0>
		usart_transmit(parameter + position);
     3dc:	80 e3       	ldi	r24, 0x30	; 48
     3de:	86 0d       	add	r24, r6
     3e0:	0e 94 19 01 	call	0x232	; 0x232 <usart_transmit>
	}

	//Transmit a data frame representing the decimal point
	if (dp_value!= 0){
     3e4:	c1 14       	cp	r12, r1
     3e6:	d1 04       	cpc	r13, r1
     3e8:	41 f0       	breq	.+16     	; 0x3fa <transmit_values+0xf6>
     3ea:	8f e0       	ldi	r24, 0x0F	; 15
     3ec:	87 0d       	add	r24, r7
		usart_transmit(parameter + 15 + (dp_value*16));
     3ee:	90 e1       	ldi	r25, 0x10	; 16
     3f0:	c9 9e       	mul	r12, r25
     3f2:	80 0d       	add	r24, r0
     3f4:	11 24       	eor	r1, r1
     3f6:	0e 94 19 01 	call	0x232	; 0x232 <usart_transmit>
	}

}
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	cf 90       	pop	r12
     412:	bf 90       	pop	r11
     414:	af 90       	pop	r10
     416:	9f 90       	pop	r9
     418:	8f 90       	pop	r8
     41a:	7f 90       	pop	r7
     41c:	6f 90       	pop	r6
     41e:	5f 90       	pop	r5
     420:	3f 90       	pop	r3
     422:	2f 90       	pop	r2
     424:	08 95       	ret

00000426 <calcAndTransmit>:

// Calculate vRMS, iPeak and average power. Transmits each parameter to CPLD.
void calcAndTransmit (volatile uint16_t vArray[], volatile uint16_t iArray[], uint16_t sizeOfArray) {
     426:	2f 92       	push	r2
     428:	3f 92       	push	r3
     42a:	4f 92       	push	r4
     42c:	5f 92       	push	r5
     42e:	6f 92       	push	r6
     430:	7f 92       	push	r7
     432:	8f 92       	push	r8
     434:	9f 92       	push	r9
     436:	af 92       	push	r10
     438:	bf 92       	push	r11
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	2a 97       	sbiw	r28, 0x0a	; 10
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	4c 01       	movw	r8, r24
     45c:	5b 01       	movw	r10, r22
	for(int i=0; i < sizeOfArray*2 -1 ; i++) {
		totalPower += (voltageArray[i] *currentArray[i]);
	}
	double avePower = fabs(totalPower/(sizeOfArray*2 -1));
	transmit_values(192, avePower);	//Transmit Power
     45e:	2d b7       	in	r18, 0x3d	; 61
     460:	3e b7       	in	r19, 0x3e	; 62
     462:	3a 87       	std	Y+10, r19	; 0x0a
     464:	29 87       	std	Y+9, r18	; 0x09
// Calculate vRMS, iPeak and average power. Transmits each parameter to CPLD.
void calcAndTransmit (volatile uint16_t vArray[], volatile uint16_t iArray[], uint16_t sizeOfArray) {

	//************************Linear approximation****************************//
	//For voltage
	double voltageArray[sizeOfArray*2 -1];
     466:	1a 01       	movw	r2, r20
     468:	22 0c       	add	r2, r2
     46a:	33 1c       	adc	r3, r3
     46c:	61 01       	movw	r12, r2
     46e:	31 e0       	ldi	r19, 0x01	; 1
     470:	c3 1a       	sub	r12, r19
     472:	d1 08       	sbc	r13, r1
     474:	c6 01       	movw	r24, r12
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	9e 83       	std	Y+6, r25	; 0x06
     480:	8d 83       	std	Y+5, r24	; 0x05
     482:	ed b7       	in	r30, 0x3d	; 61
     484:	fe b7       	in	r31, 0x3e	; 62
     486:	e8 1b       	sub	r30, r24
     488:	f9 0b       	sbc	r31, r25
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	fe bf       	out	0x3e, r31	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	ed bf       	out	0x3d, r30	; 61
     494:	2d b7       	in	r18, 0x3d	; 61
     496:	3e b7       	in	r19, 0x3e	; 62
     498:	2f 5f       	subi	r18, 0xFF	; 255
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
     49c:	38 87       	std	Y+8, r19	; 0x08
     49e:	2f 83       	std	Y+7, r18	; 0x07
	for(int i=0; i < (sizeOfArray*2-2); i+=2) {
     4a0:	32 e0       	ldi	r19, 0x02	; 2
     4a2:	23 1a       	sub	r2, r19
     4a4:	31 08       	sbc	r3, r1
     4a6:	09 f4       	brne	.+2      	; 0x4aa <calcAndTransmit+0x84>
     4a8:	63 c1       	rjmp	.+710    	; 0x770 <calcAndTransmit+0x34a>
     4aa:	ef 80       	ldd	r14, Y+7	; 0x07
     4ac:	f8 84       	ldd	r15, Y+8	; 0x08
     4ae:	00 e0       	ldi	r16, 0x00	; 0
     4b0:	10 e0       	ldi	r17, 0x00	; 0
		voltageArray[i] = calculate_voltage(vArray[i/2]);											//Store sampled value in even elements
     4b2:	38 01       	movw	r6, r16
     4b4:	11 23       	and	r17, r17
     4b6:	1c f4       	brge	.+6      	; 0x4be <calcAndTransmit+0x98>
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	68 1a       	sub	r6, r24
     4bc:	78 0a       	sbc	r7, r24
     4be:	e8 94       	clt
     4c0:	60 f8       	bld	r6, 0
     4c2:	24 01       	movw	r4, r8
     4c4:	46 0c       	add	r4, r6
     4c6:	57 1c       	adc	r5, r7
     4c8:	f2 01       	movw	r30, r4
     4ca:	80 81       	ld	r24, Z
     4cc:	91 81       	ldd	r25, Z+1	; 0x01
     4ce:	0e 94 2a 01 	call	0x254	; 0x254 <calculate_voltage>
     4d2:	f7 01       	movw	r30, r14
     4d4:	60 83       	st	Z, r22
     4d6:	71 83       	std	Z+1, r23	; 0x01
     4d8:	82 83       	std	Z+2, r24	; 0x02
     4da:	93 83       	std	Z+3, r25	; 0x03
		voltageArray[i+1] = calculate_voltage(((double)vArray[i/2] + (double)vArray[i/2+1])/2.0);	//Stores approximated values in odd elements
     4dc:	f2 01       	movw	r30, r4
     4de:	60 81       	ld	r22, Z
     4e0:	71 81       	ldd	r23, Z+1	; 0x01
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	6f 0e       	add	r6, r31
     4e6:	71 1c       	adc	r7, r1
     4e8:	f4 01       	movw	r30, r8
     4ea:	e6 0d       	add	r30, r6
     4ec:	f7 1d       	adc	r31, r7
     4ee:	60 80       	ld	r6, Z
     4f0:	71 80       	ldd	r7, Z+1	; 0x01
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 c1 05 	call	0xb82	; 0xb82 <__floatunsisf>
     4fa:	69 83       	std	Y+1, r22	; 0x01
     4fc:	7a 83       	std	Y+2, r23	; 0x02
     4fe:	8b 83       	std	Y+3, r24	; 0x03
     500:	9c 83       	std	Y+4, r25	; 0x04
     502:	b3 01       	movw	r22, r6
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 c1 05 	call	0xb82	; 0xb82 <__floatunsisf>
     50c:	9b 01       	movw	r18, r22
     50e:	ac 01       	movw	r20, r24
     510:	69 81       	ldd	r22, Y+1	; 0x01
     512:	7a 81       	ldd	r23, Y+2	; 0x02
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	9c 81       	ldd	r25, Y+4	; 0x04
     518:	0e 94 ad 04 	call	0x95a	; 0x95a <__addsf3>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
     528:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fixsfsi>
     52c:	cb 01       	movw	r24, r22
     52e:	0e 94 2a 01 	call	0x254	; 0x254 <calculate_voltage>
     532:	f7 01       	movw	r30, r14
     534:	64 83       	std	Z+4, r22	; 0x04
     536:	75 83       	std	Z+5, r23	; 0x05
     538:	86 83       	std	Z+6, r24	; 0x06
     53a:	97 83       	std	Z+7, r25	; 0x07
void calcAndTransmit (volatile uint16_t vArray[], volatile uint16_t iArray[], uint16_t sizeOfArray) {

	//************************Linear approximation****************************//
	//For voltage
	double voltageArray[sizeOfArray*2 -1];
	for(int i=0; i < (sizeOfArray*2-2); i+=2) {
     53c:	0e 5f       	subi	r16, 0xFE	; 254
     53e:	1f 4f       	sbci	r17, 0xFF	; 255
     540:	f8 e0       	ldi	r31, 0x08	; 8
     542:	ef 0e       	add	r14, r31
     544:	f1 1c       	adc	r15, r1
     546:	02 15       	cp	r16, r2
     548:	13 05       	cpc	r17, r3
     54a:	08 f4       	brcc	.+2      	; 0x54e <calcAndTransmit+0x128>
     54c:	b2 cf       	rjmp	.-156    	; 0x4b2 <calcAndTransmit+0x8c>
		voltageArray[i] = calculate_voltage(vArray[i/2]);											//Store sampled value in even elements
		voltageArray[i+1] = calculate_voltage(((double)vArray[i/2] + (double)vArray[i/2+1])/2.0);	//Stores approximated values in odd elements
	}
	voltageArray[sizeOfArray*2 -2] = calculate_voltage(vArray[sizeOfArray-1]);
     54e:	f4 01       	movw	r30, r8
     550:	e2 0d       	add	r30, r2
     552:	f3 1d       	adc	r31, r3
     554:	80 81       	ld	r24, Z
     556:	91 81       	ldd	r25, Z+1	; 0x01
     558:	0e 94 2a 01 	call	0x254	; 0x254 <calculate_voltage>
     55c:	f1 01       	movw	r30, r2
     55e:	ee 0f       	add	r30, r30
     560:	ff 1f       	adc	r31, r31
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	2f 81       	ldd	r18, Y+7	; 0x07
     568:	38 85       	ldd	r19, Y+8	; 0x08
     56a:	e2 0f       	add	r30, r18
     56c:	f3 1f       	adc	r31, r19
     56e:	60 83       	st	Z, r22
     570:	71 83       	std	Z+1, r23	; 0x01
     572:	82 83       	std	Z+2, r24	; 0x02
     574:	93 83       	std	Z+3, r25	; 0x03

	//For current
	double currentArray[sizeOfArray*2 -1];
     576:	8d b7       	in	r24, 0x3d	; 61
     578:	9e b7       	in	r25, 0x3e	; 62
     57a:	ed 81       	ldd	r30, Y+5	; 0x05
     57c:	fe 81       	ldd	r31, Y+6	; 0x06
     57e:	8e 1b       	sub	r24, r30
     580:	9f 0b       	sbc	r25, r31
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	9e bf       	out	0x3e, r25	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	8d bf       	out	0x3d, r24	; 61
     58c:	2d b7       	in	r18, 0x3d	; 61
     58e:	3e b7       	in	r19, 0x3e	; 62
     590:	2f 5f       	subi	r18, 0xFF	; 255
     592:	3f 4f       	sbci	r19, 0xFF	; 255
     594:	49 01       	movw	r8, r18
     596:	3e 83       	std	Y+6, r19	; 0x06
     598:	2d 83       	std	Y+5, r18	; 0x05
     59a:	e1 2c       	mov	r14, r1
     59c:	f1 2c       	mov	r15, r1
	for(int i=0; i < (sizeOfArray*2-2); i+=2) {
		currentArray[i] = calculate_current(iArray[i/2]);											//Store sampled value in even elements
     59e:	87 01       	movw	r16, r14
     5a0:	ff 20       	and	r15, r15
     5a2:	14 f4       	brge	.+4      	; 0x5a8 <calcAndTransmit+0x182>
     5a4:	0f 5f       	subi	r16, 0xFF	; 255
     5a6:	1f 4f       	sbci	r17, 0xFF	; 255
     5a8:	0e 7f       	andi	r16, 0xFE	; 254
     5aa:	35 01       	movw	r6, r10
     5ac:	60 0e       	add	r6, r16
     5ae:	71 1e       	adc	r7, r17
     5b0:	f3 01       	movw	r30, r6
     5b2:	80 81       	ld	r24, Z
     5b4:	91 81       	ldd	r25, Z+1	; 0x01
     5b6:	0e 94 49 01 	call	0x292	; 0x292 <calculate_current>
     5ba:	f4 01       	movw	r30, r8
     5bc:	60 83       	st	Z, r22
     5be:	71 83       	std	Z+1, r23	; 0x01
     5c0:	82 83       	std	Z+2, r24	; 0x02
     5c2:	93 83       	std	Z+3, r25	; 0x03
		currentArray[i+1] = calculate_current(((double)iArray[i/2] + (double)iArray[i/2+1])/2.0);	//Stores approximated values in odd elements
     5c4:	f3 01       	movw	r30, r6
     5c6:	60 81       	ld	r22, Z
     5c8:	71 81       	ldd	r23, Z+1	; 0x01
     5ca:	0e 5f       	subi	r16, 0xFE	; 254
     5cc:	1f 4f       	sbci	r17, 0xFF	; 255
     5ce:	f5 01       	movw	r30, r10
     5d0:	e0 0f       	add	r30, r16
     5d2:	f1 1f       	adc	r31, r17
     5d4:	00 81       	ld	r16, Z
     5d6:	11 81       	ldd	r17, Z+1	; 0x01
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 c1 05 	call	0xb82	; 0xb82 <__floatunsisf>
     5e0:	2b 01       	movw	r4, r22
     5e2:	3c 01       	movw	r6, r24
     5e4:	b8 01       	movw	r22, r16
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 c1 05 	call	0xb82	; 0xb82 <__floatunsisf>
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	c3 01       	movw	r24, r6
     5f4:	b2 01       	movw	r22, r4
     5f6:	0e 94 ad 04 	call	0x95a	; 0x95a <__addsf3>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	5f e3       	ldi	r21, 0x3F	; 63
     602:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
     606:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fixsfsi>
     60a:	cb 01       	movw	r24, r22
     60c:	0e 94 49 01 	call	0x292	; 0x292 <calculate_current>
     610:	f4 01       	movw	r30, r8
     612:	64 83       	std	Z+4, r22	; 0x04
     614:	75 83       	std	Z+5, r23	; 0x05
     616:	86 83       	std	Z+6, r24	; 0x06
     618:	97 83       	std	Z+7, r25	; 0x07
	}
	voltageArray[sizeOfArray*2 -2] = calculate_voltage(vArray[sizeOfArray-1]);

	//For current
	double currentArray[sizeOfArray*2 -1];
	for(int i=0; i < (sizeOfArray*2-2); i+=2) {
     61a:	f2 e0       	ldi	r31, 0x02	; 2
     61c:	ef 0e       	add	r14, r31
     61e:	f1 1c       	adc	r15, r1
     620:	28 e0       	ldi	r18, 0x08	; 8
     622:	82 0e       	add	r8, r18
     624:	91 1c       	adc	r9, r1
     626:	e2 14       	cp	r14, r2
     628:	f3 04       	cpc	r15, r3
     62a:	08 f4       	brcc	.+2      	; 0x62e <calcAndTransmit+0x208>
     62c:	b8 cf       	rjmp	.-144    	; 0x59e <calcAndTransmit+0x178>
		currentArray[i] = calculate_current(iArray[i/2]);											//Store sampled value in even elements
		currentArray[i+1] = calculate_current(((double)iArray[i/2] + (double)iArray[i/2+1])/2.0);	//Stores approximated values in odd elements
	}
	currentArray[sizeOfArray*2 -2] = calculate_current(iArray[sizeOfArray-1]);
     62e:	f5 01       	movw	r30, r10
     630:	e2 0d       	add	r30, r2
     632:	f3 1d       	adc	r31, r3
     634:	80 81       	ld	r24, Z
     636:	91 81       	ldd	r25, Z+1	; 0x01
     638:	0e 94 49 01 	call	0x292	; 0x292 <calculate_current>
     63c:	22 0c       	add	r2, r2
     63e:	33 1c       	adc	r3, r3
     640:	22 0c       	add	r2, r2
     642:	33 1c       	adc	r3, r3
     644:	ed 81       	ldd	r30, Y+5	; 0x05
     646:	fe 81       	ldd	r31, Y+6	; 0x06
     648:	e2 0d       	add	r30, r2
     64a:	f3 1d       	adc	r31, r3
     64c:	60 83       	st	Z, r22
     64e:	71 83       	std	Z+1, r23	; 0x01
     650:	82 83       	std	Z+2, r24	; 0x02
     652:	93 83       	std	Z+3, r25	; 0x03
     654:	ef 80       	ldd	r14, Y+7	; 0x07
     656:	f8 84       	ldd	r15, Y+8	; 0x08
     658:	57 01       	movw	r10, r14
     65a:	00 e0       	ldi	r16, 0x00	; 0
     65c:	10 e0       	ldi	r17, 0x00	; 0
     65e:	41 2c       	mov	r4, r1
     660:	51 2c       	mov	r5, r1
     662:	32 01       	movw	r6, r4


	//Calculates voltage(RMS) from sampled and approximated points
	double totalVoltageSquared=0;
	for(int i=0; i < sizeOfArray*2 -1 ; i++) {
		totalVoltageSquared += (voltageArray[i] *voltageArray[i]);
     664:	f5 01       	movw	r30, r10
     666:	61 91       	ld	r22, Z+
     668:	71 91       	ld	r23, Z+
     66a:	81 91       	ld	r24, Z+
     66c:	91 91       	ld	r25, Z+
     66e:	5f 01       	movw	r10, r30
     670:	9b 01       	movw	r18, r22
     672:	ac 01       	movw	r20, r24
     674:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
     678:	9b 01       	movw	r18, r22
     67a:	ac 01       	movw	r20, r24
     67c:	c3 01       	movw	r24, r6
     67e:	b2 01       	movw	r22, r4
     680:	0e 94 ad 04 	call	0x95a	; 0x95a <__addsf3>
     684:	2b 01       	movw	r4, r22
     686:	3c 01       	movw	r6, r24
	


	//Calculates voltage(RMS) from sampled and approximated points
	double totalVoltageSquared=0;
	for(int i=0; i < sizeOfArray*2 -1 ; i++) {
     688:	0f 5f       	subi	r16, 0xFF	; 255
     68a:	1f 4f       	sbci	r17, 0xFF	; 255
     68c:	0c 15       	cp	r16, r12
     68e:	1d 05       	cpc	r17, r13
     690:	48 f3       	brcs	.-46     	; 0x664 <calcAndTransmit+0x23e>
		totalVoltageSquared += (voltageArray[i] *voltageArray[i]);
	}
	double vRMS = sqrt((totalVoltageSquared/(sizeOfArray*2-1)));
     692:	b6 01       	movw	r22, r12
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 c1 05 	call	0xb82	; 0xb82 <__floatunsisf>
     69c:	69 83       	std	Y+1, r22	; 0x01
     69e:	7a 83       	std	Y+2, r23	; 0x02
     6a0:	8b 83       	std	Y+3, r24	; 0x03
     6a2:	9c 83       	std	Y+4, r25	; 0x04
     6a4:	29 81       	ldd	r18, Y+1	; 0x01
     6a6:	3a 81       	ldd	r19, Y+2	; 0x02
     6a8:	4b 81       	ldd	r20, Y+3	; 0x03
     6aa:	5c 81       	ldd	r21, Y+4	; 0x04
     6ac:	c3 01       	movw	r24, r6
     6ae:	b2 01       	movw	r22, r4
     6b0:	0e 94 19 05 	call	0xa32	; 0xa32 <__divsf3>
     6b4:	0e 94 17 07 	call	0xe2e	; 0xe2e <sqrt>
     6b8:	ab 01       	movw	r20, r22
     6ba:	bc 01       	movw	r22, r24

	transmit_values(64, vRMS);	//Transmit voltage
     6bc:	80 e4       	ldi	r24, 0x40	; 64
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 82 01 	call	0x304	; 0x304 <transmit_values>
     6c4:	ad 80       	ldd	r10, Y+5	; 0x05
     6c6:	be 80       	ldd	r11, Y+6	; 0x06
     6c8:	15 01       	movw	r2, r10
     6ca:	00 e0       	ldi	r16, 0x00	; 0
     6cc:	10 e0       	ldi	r17, 0x00	; 0
     6ce:	41 2c       	mov	r4, r1
     6d0:	51 2c       	mov	r5, r1
     6d2:	32 01       	movw	r6, r4

	//Calculates current(Peak) from sampled and approximated points
	double totalVShuntSquared=0;
	for(int i=0; i < sizeOfArray*2 -1 ; i++) {
		totalVShuntSquared += (currentArray[i] *currentArray[i]);
     6d4:	f1 01       	movw	r30, r2
     6d6:	61 91       	ld	r22, Z+
     6d8:	71 91       	ld	r23, Z+
     6da:	81 91       	ld	r24, Z+
     6dc:	91 91       	ld	r25, Z+
     6de:	1f 01       	movw	r2, r30
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	c3 01       	movw	r24, r6
     6ee:	b2 01       	movw	r22, r4
     6f0:	0e 94 ad 04 	call	0x95a	; 0x95a <__addsf3>
     6f4:	2b 01       	movw	r4, r22
     6f6:	3c 01       	movw	r6, r24

	transmit_values(64, vRMS);	//Transmit voltage

	//Calculates current(Peak) from sampled and approximated points
	double totalVShuntSquared=0;
	for(int i=0; i < sizeOfArray*2 -1 ; i++) {
     6f8:	0f 5f       	subi	r16, 0xFF	; 255
     6fa:	1f 4f       	sbci	r17, 0xFF	; 255
     6fc:	0c 15       	cp	r16, r12
     6fe:	1d 05       	cpc	r17, r13
     700:	48 f3       	brcs	.-46     	; 0x6d4 <calcAndTransmit+0x2ae>
		totalVShuntSquared += (currentArray[i] *currentArray[i]);
	}
	double iPeak = sqrt((totalVShuntSquared/(sizeOfArray*2-1)))*sqrt(2);
     702:	29 81       	ldd	r18, Y+1	; 0x01
     704:	3a 81       	ldd	r19, Y+2	; 0x02
     706:	4b 81       	ldd	r20, Y+3	; 0x03
     708:	5c 81       	ldd	r21, Y+4	; 0x04
     70a:	c3 01       	movw	r24, r6
     70c:	b2 01       	movw	r22, r4
     70e:	0e 94 19 05 	call	0xa32	; 0xa32 <__divsf3>
     712:	0e 94 17 07 	call	0xe2e	; 0xe2e <sqrt>
     716:	23 ef       	ldi	r18, 0xF3	; 243
     718:	34 e0       	ldi	r19, 0x04	; 4
     71a:	45 eb       	ldi	r20, 0xB5	; 181
     71c:	5f e3       	ldi	r21, 0x3F	; 63
     71e:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
     722:	ab 01       	movw	r20, r22
     724:	bc 01       	movw	r22, r24

	transmit_values(128, iPeak);	//Transmit current
     726:	80 e8       	ldi	r24, 0x80	; 128
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 82 01 	call	0x304	; 0x304 <transmit_values>
     72e:	00 e0       	ldi	r16, 0x00	; 0
     730:	10 e0       	ldi	r17, 0x00	; 0
     732:	41 2c       	mov	r4, r1
     734:	51 2c       	mov	r5, r1
     736:	32 01       	movw	r6, r4

	//***********************Trapezoidal approximation**************************//
	//Calculates power from voltage and current
	double totalPower=0;
	for(int i=0; i < sizeOfArray*2 -1 ; i++) {
		totalPower += (voltageArray[i] *currentArray[i]);
     738:	f7 01       	movw	r30, r14
     73a:	61 91       	ld	r22, Z+
     73c:	71 91       	ld	r23, Z+
     73e:	81 91       	ld	r24, Z+
     740:	91 91       	ld	r25, Z+
     742:	7f 01       	movw	r14, r30
     744:	f5 01       	movw	r30, r10
     746:	21 91       	ld	r18, Z+
     748:	31 91       	ld	r19, Z+
     74a:	41 91       	ld	r20, Z+
     74c:	51 91       	ld	r21, Z+
     74e:	5f 01       	movw	r10, r30
     750:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
     754:	9b 01       	movw	r18, r22
     756:	ac 01       	movw	r20, r24
     758:	c3 01       	movw	r24, r6
     75a:	b2 01       	movw	r22, r4
     75c:	0e 94 ad 04 	call	0x95a	; 0x95a <__addsf3>
     760:	2b 01       	movw	r4, r22
     762:	3c 01       	movw	r6, r24
	transmit_values(128, iPeak);	//Transmit current

	//***********************Trapezoidal approximation**************************//
	//Calculates power from voltage and current
	double totalPower=0;
	for(int i=0; i < sizeOfArray*2 -1 ; i++) {
     764:	0f 5f       	subi	r16, 0xFF	; 255
     766:	1f 4f       	sbci	r17, 0xFF	; 255
     768:	0c 15       	cp	r16, r12
     76a:	1d 05       	cpc	r17, r13
     76c:	28 f3       	brcs	.-54     	; 0x738 <calcAndTransmit+0x312>
     76e:	1c c0       	rjmp	.+56     	; 0x7a8 <calcAndTransmit+0x382>
	double voltageArray[sizeOfArray*2 -1];
	for(int i=0; i < (sizeOfArray*2-2); i+=2) {
		voltageArray[i] = calculate_voltage(vArray[i/2]);											//Store sampled value in even elements
		voltageArray[i+1] = calculate_voltage(((double)vArray[i/2] + (double)vArray[i/2+1])/2.0);	//Stores approximated values in odd elements
	}
	voltageArray[sizeOfArray*2 -2] = calculate_voltage(vArray[sizeOfArray-1]);
     770:	f4 01       	movw	r30, r8
     772:	80 81       	ld	r24, Z
     774:	91 81       	ldd	r25, Z+1	; 0x01
     776:	0e 94 2a 01 	call	0x254	; 0x254 <calculate_voltage>
     77a:	ef 81       	ldd	r30, Y+7	; 0x07
     77c:	f8 85       	ldd	r31, Y+8	; 0x08
     77e:	60 83       	st	Z, r22
     780:	71 83       	std	Z+1, r23	; 0x01
     782:	82 83       	std	Z+2, r24	; 0x02
     784:	93 83       	std	Z+3, r25	; 0x03

	//For current
	double currentArray[sizeOfArray*2 -1];
     786:	2d b7       	in	r18, 0x3d	; 61
     788:	3e b7       	in	r19, 0x3e	; 62
     78a:	8d 81       	ldd	r24, Y+5	; 0x05
     78c:	9e 81       	ldd	r25, Y+6	; 0x06
     78e:	28 1b       	sub	r18, r24
     790:	39 0b       	sbc	r19, r25
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	3e bf       	out	0x3e, r19	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	2d bf       	out	0x3d, r18	; 61
     79c:	ed b7       	in	r30, 0x3d	; 61
     79e:	fe b7       	in	r31, 0x3e	; 62
     7a0:	31 96       	adiw	r30, 0x01	; 1
     7a2:	fe 83       	std	Y+6, r31	; 0x06
     7a4:	ed 83       	std	Y+5, r30	; 0x05
     7a6:	43 cf       	rjmp	.-378    	; 0x62e <calcAndTransmit+0x208>
	//Calculates power from voltage and current
	double totalPower=0;
	for(int i=0; i < sizeOfArray*2 -1 ; i++) {
		totalPower += (voltageArray[i] *currentArray[i]);
	}
	double avePower = fabs(totalPower/(sizeOfArray*2 -1));
     7a8:	29 81       	ldd	r18, Y+1	; 0x01
     7aa:	3a 81       	ldd	r19, Y+2	; 0x02
     7ac:	4b 81       	ldd	r20, Y+3	; 0x03
     7ae:	5c 81       	ldd	r21, Y+4	; 0x04
     7b0:	0e 94 19 05 	call	0xa32	; 0xa32 <__divsf3>
     7b4:	ab 01       	movw	r20, r22
     7b6:	bc 01       	movw	r22, r24
     7b8:	7f 77       	andi	r23, 0x7F	; 127
	transmit_values(192, avePower);	//Transmit Power
     7ba:	80 ec       	ldi	r24, 0xC0	; 192
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 82 01 	call	0x304	; 0x304 <transmit_values>
     7c2:	29 85       	ldd	r18, Y+9	; 0x09
     7c4:	3a 85       	ldd	r19, Y+10	; 0x0a
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	3e bf       	out	0x3e, r19	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	2d bf       	out	0x3d, r18	; 61
     7d0:	2a 96       	adiw	r28, 0x0a	; 10
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	bf 90       	pop	r11
     7ee:	af 90       	pop	r10
     7f0:	9f 90       	pop	r9
     7f2:	8f 90       	pop	r8
     7f4:	7f 90       	pop	r7
     7f6:	6f 90       	pop	r6
     7f8:	5f 90       	pop	r5
     7fa:	4f 90       	pop	r4
     7fc:	3f 90       	pop	r3
     7fe:	2f 90       	pop	r2
     800:	08 95       	ret

00000802 <__vector_21>:
 volatile uint16_t adc_voltage[N_SAMPLES];
 volatile uint16_t adc_current[N_SAMPLES];
 volatile int transmitFlag = 0;

 //Interrupt to sample from one of the ADC channels
 ISR(ADC_vect){
     802:	1f 92       	push	r1
     804:	0f 92       	push	r0
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	0f 92       	push	r0
     80a:	11 24       	eor	r1, r1
     80c:	8f 93       	push	r24
     80e:	9f 93       	push	r25
     810:	ef 93       	push	r30
     812:	ff 93       	push	r31
	cli();	//Disables interrupts during this ISR
     814:	f8 94       	cli

	//Samples a voltage reading from ADC0 channel
	if (((ADMUX & (1<<MUX0))==0) && ((ADMUX & (1<<MUX2))==0)) {
     816:	80 91 7c 00 	lds	r24, 0x007C
     81a:	80 fd       	sbrc	r24, 0
     81c:	30 c0       	rjmp	.+96     	; 0x87e <__vector_21+0x7c>
     81e:	80 91 7c 00 	lds	r24, 0x007C
     822:	82 fd       	sbrc	r24, 2
     824:	2c c0       	rjmp	.+88     	; 0x87e <__vector_21+0x7c>
		adc_voltage[indexVoltage] = ADC;
     826:	e0 91 04 01 	lds	r30, 0x0104
     82a:	f0 91 05 01 	lds	r31, 0x0105
     82e:	80 91 78 00 	lds	r24, 0x0078
     832:	90 91 79 00 	lds	r25, 0x0079
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	e2 52       	subi	r30, 0x22	; 34
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	91 83       	std	Z+1, r25	; 0x01
     840:	80 83       	st	Z, r24
		if (indexVoltage < N_SAMPLES) {
     842:	80 91 04 01 	lds	r24, 0x0104
     846:	90 91 05 01 	lds	r25, 0x0105
     84a:	8c 36       	cpi	r24, 0x6C	; 108
     84c:	91 05       	cpc	r25, r1
     84e:	54 f4       	brge	.+20     	; 0x864 <__vector_21+0x62>
			indexVoltage++;
     850:	80 91 04 01 	lds	r24, 0x0104
     854:	90 91 05 01 	lds	r25, 0x0105
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	90 93 05 01 	sts	0x0105, r25
     85e:	80 93 04 01 	sts	0x0104, r24
     862:	04 c0       	rjmp	.+8      	; 0x86c <__vector_21+0x6a>
		} else {
			//When a set of samples has been complete, prepare for next set of sampling
			indexVoltage = 0;
     864:	10 92 05 01 	sts	0x0105, r1
     868:	10 92 04 01 	sts	0x0104, r1
		}
		//Change channel to ADC5
		ADMUX |= (1<<MUX2);
     86c:	ec e7       	ldi	r30, 0x7C	; 124
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	84 60       	ori	r24, 0x04	; 4
     874:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0);
     876:	80 81       	ld	r24, Z
     878:	81 60       	ori	r24, 0x01	; 1
     87a:	80 83       	st	Z, r24
     87c:	39 c0       	rjmp	.+114    	; 0x8f0 <__vector_21+0xee>
	}

	//Samples a voltage reading (of the shunt resistor) from ADC5 channel
	else if ((ADMUX & (1<<MUX0)) && (ADMUX & (1<<MUX2))) {
     87e:	80 91 7c 00 	lds	r24, 0x007C
     882:	80 ff       	sbrs	r24, 0
     884:	35 c0       	rjmp	.+106    	; 0x8f0 <__vector_21+0xee>
     886:	80 91 7c 00 	lds	r24, 0x007C
     88a:	82 ff       	sbrs	r24, 2
     88c:	31 c0       	rjmp	.+98     	; 0x8f0 <__vector_21+0xee>
		adc_current[indexCurrent] = ADC;
     88e:	e0 91 02 01 	lds	r30, 0x0102
     892:	f0 91 03 01 	lds	r31, 0x0103
     896:	80 91 78 00 	lds	r24, 0x0078
     89a:	90 91 79 00 	lds	r25, 0x0079
     89e:	ee 0f       	add	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	ea 5f       	subi	r30, 0xFA	; 250
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	91 83       	std	Z+1, r25	; 0x01
     8a8:	80 83       	st	Z, r24
		if (indexCurrent < N_SAMPLES) {
     8aa:	80 91 02 01 	lds	r24, 0x0102
     8ae:	90 91 03 01 	lds	r25, 0x0103
     8b2:	8c 36       	cpi	r24, 0x6C	; 108
     8b4:	91 05       	cpc	r25, r1
     8b6:	54 f4       	brge	.+20     	; 0x8cc <__vector_21+0xca>
			indexCurrent++;
     8b8:	80 91 02 01 	lds	r24, 0x0102
     8bc:	90 91 03 01 	lds	r25, 0x0103
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	90 93 03 01 	sts	0x0103, r25
     8c6:	80 93 02 01 	sts	0x0102, r24
     8ca:	0a c0       	rjmp	.+20     	; 0x8e0 <__vector_21+0xde>
			
		} else {
			//When a set of samples has been complete, prepare for next set of sampling
			indexCurrent = 0;
     8cc:	10 92 03 01 	sts	0x0103, r1
     8d0:	10 92 02 01 	sts	0x0102, r1
			transmitFlag= 1; //When the desired number of samples of voltage and current are read, then raise the flag to transmit the values
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	90 93 01 01 	sts	0x0101, r25
     8dc:	80 93 00 01 	sts	0x0100, r24
		}
		//Change channel to ADC0
		ADMUX &= ~(1<<MUX2);
     8e0:	ec e7       	ldi	r30, 0x7C	; 124
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	8b 7f       	andi	r24, 0xFB	; 251
     8e8:	80 83       	st	Z, r24
		ADMUX &= ~(1<<MUX0);
     8ea:	80 81       	ld	r24, Z
     8ec:	8e 7f       	andi	r24, 0xFE	; 254
     8ee:	80 83       	st	Z, r24
	}

	sei(); //Re-enables interrupts
     8f0:	78 94       	sei
	ADCSRA |= (1<<ADSC); //Start conversion for next sample
     8f2:	ea e7       	ldi	r30, 0x7A	; 122
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	80 64       	ori	r24, 0x40	; 64
     8fa:	80 83       	st	Z, r24
 }
     8fc:	ff 91       	pop	r31
     8fe:	ef 91       	pop	r30
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	0f 90       	pop	r0
     906:	0f be       	out	0x3f, r0	; 63
     908:	0f 90       	pop	r0
     90a:	1f 90       	pop	r1
     90c:	18 95       	reti

0000090e <main>:


int main(void)
{
	sei(); //Enable global interrupts
     90e:	78 94       	sei
	//Initialize registers
	usart_init(MYUBRR);
     910:	87 e6       	ldi	r24, 0x67	; 103
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 0a 01 	call	0x214	; 0x214 <usart_init>
	adc_init();
     918:	0e 94 21 01 	call	0x242	; 0x242 <adc_init>

    while (1) {		
		//After desired number of samples of voltage and current(9 Waveforms), the voltage(RMS) and current(Peak) is transmitted to the CPLD
		if (transmitFlag==1) {
     91c:	80 91 00 01 	lds	r24, 0x0100
     920:	90 91 01 01 	lds	r25, 0x0101
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	d1 f7       	brne	.-12     	; 0x91c <main+0xe>
			cli();	//Disables interrupts so parameters can be calculated
     928:	f8 94       	cli

			calcAndTransmit(adc_voltage, adc_current, sizeof(adc_voltage)/sizeof(adc_voltage[0]));
     92a:	4c e6       	ldi	r20, 0x6C	; 108
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	66 e0       	ldi	r22, 0x06	; 6
     930:	71 e0       	ldi	r23, 0x01	; 1
     932:	8e ed       	ldi	r24, 0xDE	; 222
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 13 02 	call	0x426	; 0x426 <calcAndTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     93a:	2f ef       	ldi	r18, 0xFF	; 255
     93c:	89 e6       	ldi	r24, 0x69	; 105
     93e:	98 e1       	ldi	r25, 0x18	; 24
     940:	21 50       	subi	r18, 0x01	; 1
     942:	80 40       	sbci	r24, 0x00	; 0
     944:	90 40       	sbci	r25, 0x00	; 0
     946:	e1 f7       	brne	.-8      	; 0x940 <main+0x32>
     948:	00 c0       	rjmp	.+0      	; 0x94a <main+0x3c>
     94a:	00 00       	nop

			_delay_ms(500); //Delay so display doesn't time out
			transmitFlag = 0;	//Resets flag and re-enables sampling so we can take another sample
     94c:	10 92 01 01 	sts	0x0101, r1
     950:	10 92 00 01 	sts	0x0100, r1
			sei();	//Re-enable interrupts fro sampling again
     954:	78 94       	sei
     956:	e2 cf       	rjmp	.-60     	; 0x91c <main+0xe>

00000958 <__subsf3>:
     958:	50 58       	subi	r21, 0x80	; 128

0000095a <__addsf3>:
     95a:	bb 27       	eor	r27, r27
     95c:	aa 27       	eor	r26, r26
     95e:	0e 94 c4 04 	call	0x988	; 0x988 <__addsf3x>
     962:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_round>
     966:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_pscA>
     96a:	38 f0       	brcs	.+14     	; 0x97a <__addsf3+0x20>
     96c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_pscB>
     970:	20 f0       	brcs	.+8      	; 0x97a <__addsf3+0x20>
     972:	39 f4       	brne	.+14     	; 0x982 <__addsf3+0x28>
     974:	9f 3f       	cpi	r25, 0xFF	; 255
     976:	19 f4       	brne	.+6      	; 0x97e <__addsf3+0x24>
     978:	26 f4       	brtc	.+8      	; 0x982 <__addsf3+0x28>
     97a:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_nan>
     97e:	0e f4       	brtc	.+2      	; 0x982 <__addsf3+0x28>
     980:	e0 95       	com	r30
     982:	e7 fb       	bst	r30, 7
     984:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_inf>

00000988 <__addsf3x>:
     988:	e9 2f       	mov	r30, r25
     98a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_split3>
     98e:	58 f3       	brcs	.-42     	; 0x966 <__addsf3+0xc>
     990:	ba 17       	cp	r27, r26
     992:	62 07       	cpc	r22, r18
     994:	73 07       	cpc	r23, r19
     996:	84 07       	cpc	r24, r20
     998:	95 07       	cpc	r25, r21
     99a:	20 f0       	brcs	.+8      	; 0x9a4 <__addsf3x+0x1c>
     99c:	79 f4       	brne	.+30     	; 0x9bc <__addsf3x+0x34>
     99e:	a6 f5       	brtc	.+104    	; 0xa08 <__addsf3x+0x80>
     9a0:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_zero>
     9a4:	0e f4       	brtc	.+2      	; 0x9a8 <__addsf3x+0x20>
     9a6:	e0 95       	com	r30
     9a8:	0b 2e       	mov	r0, r27
     9aa:	ba 2f       	mov	r27, r26
     9ac:	a0 2d       	mov	r26, r0
     9ae:	0b 01       	movw	r0, r22
     9b0:	b9 01       	movw	r22, r18
     9b2:	90 01       	movw	r18, r0
     9b4:	0c 01       	movw	r0, r24
     9b6:	ca 01       	movw	r24, r20
     9b8:	a0 01       	movw	r20, r0
     9ba:	11 24       	eor	r1, r1
     9bc:	ff 27       	eor	r31, r31
     9be:	59 1b       	sub	r21, r25
     9c0:	99 f0       	breq	.+38     	; 0x9e8 <__addsf3x+0x60>
     9c2:	59 3f       	cpi	r21, 0xF9	; 249
     9c4:	50 f4       	brcc	.+20     	; 0x9da <__addsf3x+0x52>
     9c6:	50 3e       	cpi	r21, 0xE0	; 224
     9c8:	68 f1       	brcs	.+90     	; 0xa24 <__addsf3x+0x9c>
     9ca:	1a 16       	cp	r1, r26
     9cc:	f0 40       	sbci	r31, 0x00	; 0
     9ce:	a2 2f       	mov	r26, r18
     9d0:	23 2f       	mov	r18, r19
     9d2:	34 2f       	mov	r19, r20
     9d4:	44 27       	eor	r20, r20
     9d6:	58 5f       	subi	r21, 0xF8	; 248
     9d8:	f3 cf       	rjmp	.-26     	; 0x9c0 <__addsf3x+0x38>
     9da:	46 95       	lsr	r20
     9dc:	37 95       	ror	r19
     9de:	27 95       	ror	r18
     9e0:	a7 95       	ror	r26
     9e2:	f0 40       	sbci	r31, 0x00	; 0
     9e4:	53 95       	inc	r21
     9e6:	c9 f7       	brne	.-14     	; 0x9da <__addsf3x+0x52>
     9e8:	7e f4       	brtc	.+30     	; 0xa08 <__addsf3x+0x80>
     9ea:	1f 16       	cp	r1, r31
     9ec:	ba 0b       	sbc	r27, r26
     9ee:	62 0b       	sbc	r22, r18
     9f0:	73 0b       	sbc	r23, r19
     9f2:	84 0b       	sbc	r24, r20
     9f4:	ba f0       	brmi	.+46     	; 0xa24 <__addsf3x+0x9c>
     9f6:	91 50       	subi	r25, 0x01	; 1
     9f8:	a1 f0       	breq	.+40     	; 0xa22 <__addsf3x+0x9a>
     9fa:	ff 0f       	add	r31, r31
     9fc:	bb 1f       	adc	r27, r27
     9fe:	66 1f       	adc	r22, r22
     a00:	77 1f       	adc	r23, r23
     a02:	88 1f       	adc	r24, r24
     a04:	c2 f7       	brpl	.-16     	; 0x9f6 <__addsf3x+0x6e>
     a06:	0e c0       	rjmp	.+28     	; 0xa24 <__addsf3x+0x9c>
     a08:	ba 0f       	add	r27, r26
     a0a:	62 1f       	adc	r22, r18
     a0c:	73 1f       	adc	r23, r19
     a0e:	84 1f       	adc	r24, r20
     a10:	48 f4       	brcc	.+18     	; 0xa24 <__addsf3x+0x9c>
     a12:	87 95       	ror	r24
     a14:	77 95       	ror	r23
     a16:	67 95       	ror	r22
     a18:	b7 95       	ror	r27
     a1a:	f7 95       	ror	r31
     a1c:	9e 3f       	cpi	r25, 0xFE	; 254
     a1e:	08 f0       	brcs	.+2      	; 0xa22 <__addsf3x+0x9a>
     a20:	b0 cf       	rjmp	.-160    	; 0x982 <__addsf3+0x28>
     a22:	93 95       	inc	r25
     a24:	88 0f       	add	r24, r24
     a26:	08 f0       	brcs	.+2      	; 0xa2a <__addsf3x+0xa2>
     a28:	99 27       	eor	r25, r25
     a2a:	ee 0f       	add	r30, r30
     a2c:	97 95       	ror	r25
     a2e:	87 95       	ror	r24
     a30:	08 95       	ret

00000a32 <__divsf3>:
     a32:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__divsf3x>
     a36:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_round>
     a3a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_pscB>
     a3e:	58 f0       	brcs	.+22     	; 0xa56 <__divsf3+0x24>
     a40:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_pscA>
     a44:	40 f0       	brcs	.+16     	; 0xa56 <__divsf3+0x24>
     a46:	29 f4       	brne	.+10     	; 0xa52 <__divsf3+0x20>
     a48:	5f 3f       	cpi	r21, 0xFF	; 255
     a4a:	29 f0       	breq	.+10     	; 0xa56 <__divsf3+0x24>
     a4c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_inf>
     a50:	51 11       	cpse	r21, r1
     a52:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_szero>
     a56:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_nan>

00000a5a <__divsf3x>:
     a5a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_split3>
     a5e:	68 f3       	brcs	.-38     	; 0xa3a <__divsf3+0x8>

00000a60 <__divsf3_pse>:
     a60:	99 23       	and	r25, r25
     a62:	b1 f3       	breq	.-20     	; 0xa50 <__divsf3+0x1e>
     a64:	55 23       	and	r21, r21
     a66:	91 f3       	breq	.-28     	; 0xa4c <__divsf3+0x1a>
     a68:	95 1b       	sub	r25, r21
     a6a:	55 0b       	sbc	r21, r21
     a6c:	bb 27       	eor	r27, r27
     a6e:	aa 27       	eor	r26, r26
     a70:	62 17       	cp	r22, r18
     a72:	73 07       	cpc	r23, r19
     a74:	84 07       	cpc	r24, r20
     a76:	38 f0       	brcs	.+14     	; 0xa86 <__divsf3_pse+0x26>
     a78:	9f 5f       	subi	r25, 0xFF	; 255
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	22 0f       	add	r18, r18
     a7e:	33 1f       	adc	r19, r19
     a80:	44 1f       	adc	r20, r20
     a82:	aa 1f       	adc	r26, r26
     a84:	a9 f3       	breq	.-22     	; 0xa70 <__divsf3_pse+0x10>
     a86:	35 d0       	rcall	.+106    	; 0xaf2 <__divsf3_pse+0x92>
     a88:	0e 2e       	mov	r0, r30
     a8a:	3a f0       	brmi	.+14     	; 0xa9a <__divsf3_pse+0x3a>
     a8c:	e0 e8       	ldi	r30, 0x80	; 128
     a8e:	32 d0       	rcall	.+100    	; 0xaf4 <__divsf3_pse+0x94>
     a90:	91 50       	subi	r25, 0x01	; 1
     a92:	50 40       	sbci	r21, 0x00	; 0
     a94:	e6 95       	lsr	r30
     a96:	00 1c       	adc	r0, r0
     a98:	ca f7       	brpl	.-14     	; 0xa8c <__divsf3_pse+0x2c>
     a9a:	2b d0       	rcall	.+86     	; 0xaf2 <__divsf3_pse+0x92>
     a9c:	fe 2f       	mov	r31, r30
     a9e:	29 d0       	rcall	.+82     	; 0xaf2 <__divsf3_pse+0x92>
     aa0:	66 0f       	add	r22, r22
     aa2:	77 1f       	adc	r23, r23
     aa4:	88 1f       	adc	r24, r24
     aa6:	bb 1f       	adc	r27, r27
     aa8:	26 17       	cp	r18, r22
     aaa:	37 07       	cpc	r19, r23
     aac:	48 07       	cpc	r20, r24
     aae:	ab 07       	cpc	r26, r27
     ab0:	b0 e8       	ldi	r27, 0x80	; 128
     ab2:	09 f0       	breq	.+2      	; 0xab6 <__divsf3_pse+0x56>
     ab4:	bb 0b       	sbc	r27, r27
     ab6:	80 2d       	mov	r24, r0
     ab8:	bf 01       	movw	r22, r30
     aba:	ff 27       	eor	r31, r31
     abc:	93 58       	subi	r25, 0x83	; 131
     abe:	5f 4f       	sbci	r21, 0xFF	; 255
     ac0:	3a f0       	brmi	.+14     	; 0xad0 <__divsf3_pse+0x70>
     ac2:	9e 3f       	cpi	r25, 0xFE	; 254
     ac4:	51 05       	cpc	r21, r1
     ac6:	78 f0       	brcs	.+30     	; 0xae6 <__divsf3_pse+0x86>
     ac8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_inf>
     acc:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_szero>
     ad0:	5f 3f       	cpi	r21, 0xFF	; 255
     ad2:	e4 f3       	brlt	.-8      	; 0xacc <__divsf3_pse+0x6c>
     ad4:	98 3e       	cpi	r25, 0xE8	; 232
     ad6:	d4 f3       	brlt	.-12     	; 0xacc <__divsf3_pse+0x6c>
     ad8:	86 95       	lsr	r24
     ada:	77 95       	ror	r23
     adc:	67 95       	ror	r22
     ade:	b7 95       	ror	r27
     ae0:	f7 95       	ror	r31
     ae2:	9f 5f       	subi	r25, 0xFF	; 255
     ae4:	c9 f7       	brne	.-14     	; 0xad8 <__divsf3_pse+0x78>
     ae6:	88 0f       	add	r24, r24
     ae8:	91 1d       	adc	r25, r1
     aea:	96 95       	lsr	r25
     aec:	87 95       	ror	r24
     aee:	97 f9       	bld	r25, 7
     af0:	08 95       	ret
     af2:	e1 e0       	ldi	r30, 0x01	; 1
     af4:	66 0f       	add	r22, r22
     af6:	77 1f       	adc	r23, r23
     af8:	88 1f       	adc	r24, r24
     afa:	bb 1f       	adc	r27, r27
     afc:	62 17       	cp	r22, r18
     afe:	73 07       	cpc	r23, r19
     b00:	84 07       	cpc	r24, r20
     b02:	ba 07       	cpc	r27, r26
     b04:	20 f0       	brcs	.+8      	; 0xb0e <__divsf3_pse+0xae>
     b06:	62 1b       	sub	r22, r18
     b08:	73 0b       	sbc	r23, r19
     b0a:	84 0b       	sbc	r24, r20
     b0c:	ba 0b       	sbc	r27, r26
     b0e:	ee 1f       	adc	r30, r30
     b10:	88 f7       	brcc	.-30     	; 0xaf4 <__divsf3_pse+0x94>
     b12:	e0 95       	com	r30
     b14:	08 95       	ret

00000b16 <__fixsfsi>:
     b16:	0e 94 92 05 	call	0xb24	; 0xb24 <__fixunssfsi>
     b1a:	68 94       	set
     b1c:	b1 11       	cpse	r27, r1
     b1e:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_szero>
     b22:	08 95       	ret

00000b24 <__fixunssfsi>:
     b24:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__fp_splitA>
     b28:	88 f0       	brcs	.+34     	; 0xb4c <__fixunssfsi+0x28>
     b2a:	9f 57       	subi	r25, 0x7F	; 127
     b2c:	98 f0       	brcs	.+38     	; 0xb54 <__fixunssfsi+0x30>
     b2e:	b9 2f       	mov	r27, r25
     b30:	99 27       	eor	r25, r25
     b32:	b7 51       	subi	r27, 0x17	; 23
     b34:	b0 f0       	brcs	.+44     	; 0xb62 <__fixunssfsi+0x3e>
     b36:	e1 f0       	breq	.+56     	; 0xb70 <__fixunssfsi+0x4c>
     b38:	66 0f       	add	r22, r22
     b3a:	77 1f       	adc	r23, r23
     b3c:	88 1f       	adc	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	1a f0       	brmi	.+6      	; 0xb48 <__fixunssfsi+0x24>
     b42:	ba 95       	dec	r27
     b44:	c9 f7       	brne	.-14     	; 0xb38 <__fixunssfsi+0x14>
     b46:	14 c0       	rjmp	.+40     	; 0xb70 <__fixunssfsi+0x4c>
     b48:	b1 30       	cpi	r27, 0x01	; 1
     b4a:	91 f0       	breq	.+36     	; 0xb70 <__fixunssfsi+0x4c>
     b4c:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_zero>
     b50:	b1 e0       	ldi	r27, 0x01	; 1
     b52:	08 95       	ret
     b54:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_zero>
     b58:	67 2f       	mov	r22, r23
     b5a:	78 2f       	mov	r23, r24
     b5c:	88 27       	eor	r24, r24
     b5e:	b8 5f       	subi	r27, 0xF8	; 248
     b60:	39 f0       	breq	.+14     	; 0xb70 <__fixunssfsi+0x4c>
     b62:	b9 3f       	cpi	r27, 0xF9	; 249
     b64:	cc f3       	brlt	.-14     	; 0xb58 <__fixunssfsi+0x34>
     b66:	86 95       	lsr	r24
     b68:	77 95       	ror	r23
     b6a:	67 95       	ror	r22
     b6c:	b3 95       	inc	r27
     b6e:	d9 f7       	brne	.-10     	; 0xb66 <__fixunssfsi+0x42>
     b70:	3e f4       	brtc	.+14     	; 0xb80 <__fixunssfsi+0x5c>
     b72:	90 95       	com	r25
     b74:	80 95       	com	r24
     b76:	70 95       	com	r23
     b78:	61 95       	neg	r22
     b7a:	7f 4f       	sbci	r23, 0xFF	; 255
     b7c:	8f 4f       	sbci	r24, 0xFF	; 255
     b7e:	9f 4f       	sbci	r25, 0xFF	; 255
     b80:	08 95       	ret

00000b82 <__floatunsisf>:
     b82:	e8 94       	clt
     b84:	09 c0       	rjmp	.+18     	; 0xb98 <__floatsisf+0x12>

00000b86 <__floatsisf>:
     b86:	97 fb       	bst	r25, 7
     b88:	3e f4       	brtc	.+14     	; 0xb98 <__floatsisf+0x12>
     b8a:	90 95       	com	r25
     b8c:	80 95       	com	r24
     b8e:	70 95       	com	r23
     b90:	61 95       	neg	r22
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	8f 4f       	sbci	r24, 0xFF	; 255
     b96:	9f 4f       	sbci	r25, 0xFF	; 255
     b98:	99 23       	and	r25, r25
     b9a:	a9 f0       	breq	.+42     	; 0xbc6 <__floatsisf+0x40>
     b9c:	f9 2f       	mov	r31, r25
     b9e:	96 e9       	ldi	r25, 0x96	; 150
     ba0:	bb 27       	eor	r27, r27
     ba2:	93 95       	inc	r25
     ba4:	f6 95       	lsr	r31
     ba6:	87 95       	ror	r24
     ba8:	77 95       	ror	r23
     baa:	67 95       	ror	r22
     bac:	b7 95       	ror	r27
     bae:	f1 11       	cpse	r31, r1
     bb0:	f8 cf       	rjmp	.-16     	; 0xba2 <__floatsisf+0x1c>
     bb2:	fa f4       	brpl	.+62     	; 0xbf2 <__floatsisf+0x6c>
     bb4:	bb 0f       	add	r27, r27
     bb6:	11 f4       	brne	.+4      	; 0xbbc <__floatsisf+0x36>
     bb8:	60 ff       	sbrs	r22, 0
     bba:	1b c0       	rjmp	.+54     	; 0xbf2 <__floatsisf+0x6c>
     bbc:	6f 5f       	subi	r22, 0xFF	; 255
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255
     bc0:	8f 4f       	sbci	r24, 0xFF	; 255
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	16 c0       	rjmp	.+44     	; 0xbf2 <__floatsisf+0x6c>
     bc6:	88 23       	and	r24, r24
     bc8:	11 f0       	breq	.+4      	; 0xbce <__floatsisf+0x48>
     bca:	96 e9       	ldi	r25, 0x96	; 150
     bcc:	11 c0       	rjmp	.+34     	; 0xbf0 <__floatsisf+0x6a>
     bce:	77 23       	and	r23, r23
     bd0:	21 f0       	breq	.+8      	; 0xbda <__floatsisf+0x54>
     bd2:	9e e8       	ldi	r25, 0x8E	; 142
     bd4:	87 2f       	mov	r24, r23
     bd6:	76 2f       	mov	r23, r22
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <__floatsisf+0x5e>
     bda:	66 23       	and	r22, r22
     bdc:	71 f0       	breq	.+28     	; 0xbfa <__floatsisf+0x74>
     bde:	96 e8       	ldi	r25, 0x86	; 134
     be0:	86 2f       	mov	r24, r22
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	2a f0       	brmi	.+10     	; 0xbf2 <__floatsisf+0x6c>
     be8:	9a 95       	dec	r25
     bea:	66 0f       	add	r22, r22
     bec:	77 1f       	adc	r23, r23
     bee:	88 1f       	adc	r24, r24
     bf0:	da f7       	brpl	.-10     	; 0xbe8 <__floatsisf+0x62>
     bf2:	88 0f       	add	r24, r24
     bf4:	96 95       	lsr	r25
     bf6:	87 95       	ror	r24
     bf8:	97 f9       	bld	r25, 7
     bfa:	08 95       	ret

00000bfc <__fp_inf>:
     bfc:	97 f9       	bld	r25, 7
     bfe:	9f 67       	ori	r25, 0x7F	; 127
     c00:	80 e8       	ldi	r24, 0x80	; 128
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	08 95       	ret

00000c08 <__fp_nan>:
     c08:	9f ef       	ldi	r25, 0xFF	; 255
     c0a:	80 ec       	ldi	r24, 0xC0	; 192
     c0c:	08 95       	ret

00000c0e <__fp_pscA>:
     c0e:	00 24       	eor	r0, r0
     c10:	0a 94       	dec	r0
     c12:	16 16       	cp	r1, r22
     c14:	17 06       	cpc	r1, r23
     c16:	18 06       	cpc	r1, r24
     c18:	09 06       	cpc	r0, r25
     c1a:	08 95       	ret

00000c1c <__fp_pscB>:
     c1c:	00 24       	eor	r0, r0
     c1e:	0a 94       	dec	r0
     c20:	12 16       	cp	r1, r18
     c22:	13 06       	cpc	r1, r19
     c24:	14 06       	cpc	r1, r20
     c26:	05 06       	cpc	r0, r21
     c28:	08 95       	ret

00000c2a <__fp_round>:
     c2a:	09 2e       	mov	r0, r25
     c2c:	03 94       	inc	r0
     c2e:	00 0c       	add	r0, r0
     c30:	11 f4       	brne	.+4      	; 0xc36 <__fp_round+0xc>
     c32:	88 23       	and	r24, r24
     c34:	52 f0       	brmi	.+20     	; 0xc4a <__fp_round+0x20>
     c36:	bb 0f       	add	r27, r27
     c38:	40 f4       	brcc	.+16     	; 0xc4a <__fp_round+0x20>
     c3a:	bf 2b       	or	r27, r31
     c3c:	11 f4       	brne	.+4      	; 0xc42 <__fp_round+0x18>
     c3e:	60 ff       	sbrs	r22, 0
     c40:	04 c0       	rjmp	.+8      	; 0xc4a <__fp_round+0x20>
     c42:	6f 5f       	subi	r22, 0xFF	; 255
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	8f 4f       	sbci	r24, 0xFF	; 255
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	08 95       	ret

00000c4c <__fp_split3>:
     c4c:	57 fd       	sbrc	r21, 7
     c4e:	90 58       	subi	r25, 0x80	; 128
     c50:	44 0f       	add	r20, r20
     c52:	55 1f       	adc	r21, r21
     c54:	59 f0       	breq	.+22     	; 0xc6c <__fp_splitA+0x10>
     c56:	5f 3f       	cpi	r21, 0xFF	; 255
     c58:	71 f0       	breq	.+28     	; 0xc76 <__fp_splitA+0x1a>
     c5a:	47 95       	ror	r20

00000c5c <__fp_splitA>:
     c5c:	88 0f       	add	r24, r24
     c5e:	97 fb       	bst	r25, 7
     c60:	99 1f       	adc	r25, r25
     c62:	61 f0       	breq	.+24     	; 0xc7c <__fp_splitA+0x20>
     c64:	9f 3f       	cpi	r25, 0xFF	; 255
     c66:	79 f0       	breq	.+30     	; 0xc86 <__fp_splitA+0x2a>
     c68:	87 95       	ror	r24
     c6a:	08 95       	ret
     c6c:	12 16       	cp	r1, r18
     c6e:	13 06       	cpc	r1, r19
     c70:	14 06       	cpc	r1, r20
     c72:	55 1f       	adc	r21, r21
     c74:	f2 cf       	rjmp	.-28     	; 0xc5a <__fp_split3+0xe>
     c76:	46 95       	lsr	r20
     c78:	f1 df       	rcall	.-30     	; 0xc5c <__fp_splitA>
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <__fp_splitA+0x30>
     c7c:	16 16       	cp	r1, r22
     c7e:	17 06       	cpc	r1, r23
     c80:	18 06       	cpc	r1, r24
     c82:	99 1f       	adc	r25, r25
     c84:	f1 cf       	rjmp	.-30     	; 0xc68 <__fp_splitA+0xc>
     c86:	86 95       	lsr	r24
     c88:	71 05       	cpc	r23, r1
     c8a:	61 05       	cpc	r22, r1
     c8c:	08 94       	sec
     c8e:	08 95       	ret

00000c90 <__fp_zero>:
     c90:	e8 94       	clt

00000c92 <__fp_szero>:
     c92:	bb 27       	eor	r27, r27
     c94:	66 27       	eor	r22, r22
     c96:	77 27       	eor	r23, r23
     c98:	cb 01       	movw	r24, r22
     c9a:	97 f9       	bld	r25, 7
     c9c:	08 95       	ret

00000c9e <__gesf2>:
     c9e:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_cmp>
     ca2:	08 f4       	brcc	.+2      	; 0xca6 <__gesf2+0x8>
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	08 95       	ret

00000ca8 <__mulsf3>:
     ca8:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3x>
     cac:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_round>
     cb0:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_pscA>
     cb4:	38 f0       	brcs	.+14     	; 0xcc4 <__mulsf3+0x1c>
     cb6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_pscB>
     cba:	20 f0       	brcs	.+8      	; 0xcc4 <__mulsf3+0x1c>
     cbc:	95 23       	and	r25, r21
     cbe:	11 f0       	breq	.+4      	; 0xcc4 <__mulsf3+0x1c>
     cc0:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_inf>
     cc4:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_nan>
     cc8:	11 24       	eor	r1, r1
     cca:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_szero>

00000cce <__mulsf3x>:
     cce:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fp_split3>
     cd2:	70 f3       	brcs	.-36     	; 0xcb0 <__mulsf3+0x8>

00000cd4 <__mulsf3_pse>:
     cd4:	95 9f       	mul	r25, r21
     cd6:	c1 f3       	breq	.-16     	; 0xcc8 <__mulsf3+0x20>
     cd8:	95 0f       	add	r25, r21
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	55 1f       	adc	r21, r21
     cde:	62 9f       	mul	r22, r18
     ce0:	f0 01       	movw	r30, r0
     ce2:	72 9f       	mul	r23, r18
     ce4:	bb 27       	eor	r27, r27
     ce6:	f0 0d       	add	r31, r0
     ce8:	b1 1d       	adc	r27, r1
     cea:	63 9f       	mul	r22, r19
     cec:	aa 27       	eor	r26, r26
     cee:	f0 0d       	add	r31, r0
     cf0:	b1 1d       	adc	r27, r1
     cf2:	aa 1f       	adc	r26, r26
     cf4:	64 9f       	mul	r22, r20
     cf6:	66 27       	eor	r22, r22
     cf8:	b0 0d       	add	r27, r0
     cfa:	a1 1d       	adc	r26, r1
     cfc:	66 1f       	adc	r22, r22
     cfe:	82 9f       	mul	r24, r18
     d00:	22 27       	eor	r18, r18
     d02:	b0 0d       	add	r27, r0
     d04:	a1 1d       	adc	r26, r1
     d06:	62 1f       	adc	r22, r18
     d08:	73 9f       	mul	r23, r19
     d0a:	b0 0d       	add	r27, r0
     d0c:	a1 1d       	adc	r26, r1
     d0e:	62 1f       	adc	r22, r18
     d10:	83 9f       	mul	r24, r19
     d12:	a0 0d       	add	r26, r0
     d14:	61 1d       	adc	r22, r1
     d16:	22 1f       	adc	r18, r18
     d18:	74 9f       	mul	r23, r20
     d1a:	33 27       	eor	r19, r19
     d1c:	a0 0d       	add	r26, r0
     d1e:	61 1d       	adc	r22, r1
     d20:	23 1f       	adc	r18, r19
     d22:	84 9f       	mul	r24, r20
     d24:	60 0d       	add	r22, r0
     d26:	21 1d       	adc	r18, r1
     d28:	82 2f       	mov	r24, r18
     d2a:	76 2f       	mov	r23, r22
     d2c:	6a 2f       	mov	r22, r26
     d2e:	11 24       	eor	r1, r1
     d30:	9f 57       	subi	r25, 0x7F	; 127
     d32:	50 40       	sbci	r21, 0x00	; 0
     d34:	9a f0       	brmi	.+38     	; 0xd5c <__mulsf3_pse+0x88>
     d36:	f1 f0       	breq	.+60     	; 0xd74 <__mulsf3_pse+0xa0>
     d38:	88 23       	and	r24, r24
     d3a:	4a f0       	brmi	.+18     	; 0xd4e <__mulsf3_pse+0x7a>
     d3c:	ee 0f       	add	r30, r30
     d3e:	ff 1f       	adc	r31, r31
     d40:	bb 1f       	adc	r27, r27
     d42:	66 1f       	adc	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	88 1f       	adc	r24, r24
     d48:	91 50       	subi	r25, 0x01	; 1
     d4a:	50 40       	sbci	r21, 0x00	; 0
     d4c:	a9 f7       	brne	.-22     	; 0xd38 <__mulsf3_pse+0x64>
     d4e:	9e 3f       	cpi	r25, 0xFE	; 254
     d50:	51 05       	cpc	r21, r1
     d52:	80 f0       	brcs	.+32     	; 0xd74 <__mulsf3_pse+0xa0>
     d54:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_inf>
     d58:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_szero>
     d5c:	5f 3f       	cpi	r21, 0xFF	; 255
     d5e:	e4 f3       	brlt	.-8      	; 0xd58 <__mulsf3_pse+0x84>
     d60:	98 3e       	cpi	r25, 0xE8	; 232
     d62:	d4 f3       	brlt	.-12     	; 0xd58 <__mulsf3_pse+0x84>
     d64:	86 95       	lsr	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b7 95       	ror	r27
     d6c:	f7 95       	ror	r31
     d6e:	e7 95       	ror	r30
     d70:	9f 5f       	subi	r25, 0xFF	; 255
     d72:	c1 f7       	brne	.-16     	; 0xd64 <__mulsf3_pse+0x90>
     d74:	fe 2b       	or	r31, r30
     d76:	88 0f       	add	r24, r24
     d78:	91 1d       	adc	r25, r1
     d7a:	96 95       	lsr	r25
     d7c:	87 95       	ror	r24
     d7e:	97 f9       	bld	r25, 7
     d80:	08 95       	ret

00000d82 <pow>:
     d82:	fa 01       	movw	r30, r20
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	30 96       	adiw	r30, 0x00	; 0
     d8a:	21 05       	cpc	r18, r1
     d8c:	31 05       	cpc	r19, r1
     d8e:	a1 f1       	breq	.+104    	; 0xdf8 <pow+0x76>
     d90:	61 15       	cp	r22, r1
     d92:	71 05       	cpc	r23, r1
     d94:	61 f4       	brne	.+24     	; 0xdae <pow+0x2c>
     d96:	80 38       	cpi	r24, 0x80	; 128
     d98:	bf e3       	ldi	r27, 0x3F	; 63
     d9a:	9b 07       	cpc	r25, r27
     d9c:	49 f1       	breq	.+82     	; 0xdf0 <pow+0x6e>
     d9e:	68 94       	set
     da0:	90 38       	cpi	r25, 0x80	; 128
     da2:	81 05       	cpc	r24, r1
     da4:	61 f0       	breq	.+24     	; 0xdbe <pow+0x3c>
     da6:	80 38       	cpi	r24, 0x80	; 128
     da8:	bf ef       	ldi	r27, 0xFF	; 255
     daa:	9b 07       	cpc	r25, r27
     dac:	41 f0       	breq	.+16     	; 0xdbe <pow+0x3c>
     dae:	99 23       	and	r25, r25
     db0:	4a f5       	brpl	.+82     	; 0xe04 <pow+0x82>
     db2:	ff 3f       	cpi	r31, 0xFF	; 255
     db4:	e1 05       	cpc	r30, r1
     db6:	31 05       	cpc	r19, r1
     db8:	21 05       	cpc	r18, r1
     dba:	19 f1       	breq	.+70     	; 0xe02 <pow+0x80>
     dbc:	e8 94       	clt
     dbe:	08 94       	sec
     dc0:	e7 95       	ror	r30
     dc2:	d9 01       	movw	r26, r18
     dc4:	aa 23       	and	r26, r26
     dc6:	29 f4       	brne	.+10     	; 0xdd2 <pow+0x50>
     dc8:	ab 2f       	mov	r26, r27
     dca:	be 2f       	mov	r27, r30
     dcc:	f8 5f       	subi	r31, 0xF8	; 248
     dce:	d0 f3       	brcs	.-12     	; 0xdc4 <pow+0x42>
     dd0:	10 c0       	rjmp	.+32     	; 0xdf2 <pow+0x70>
     dd2:	ff 5f       	subi	r31, 0xFF	; 255
     dd4:	70 f4       	brcc	.+28     	; 0xdf2 <pow+0x70>
     dd6:	a6 95       	lsr	r26
     dd8:	e0 f7       	brcc	.-8      	; 0xdd2 <pow+0x50>
     dda:	f7 39       	cpi	r31, 0x97	; 151
     ddc:	50 f0       	brcs	.+20     	; 0xdf2 <pow+0x70>
     dde:	19 f0       	breq	.+6      	; 0xde6 <pow+0x64>
     de0:	ff 3a       	cpi	r31, 0xAF	; 175
     de2:	38 f4       	brcc	.+14     	; 0xdf2 <pow+0x70>
     de4:	9f 77       	andi	r25, 0x7F	; 127
     de6:	9f 93       	push	r25
     de8:	0d d0       	rcall	.+26     	; 0xe04 <pow+0x82>
     dea:	0f 90       	pop	r0
     dec:	07 fc       	sbrc	r0, 7
     dee:	90 58       	subi	r25, 0x80	; 128
     df0:	08 95       	ret
     df2:	46 f0       	brts	.+16     	; 0xe04 <pow+0x82>
     df4:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_nan>
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 e8       	ldi	r24, 0x80	; 128
     dfe:	9f e3       	ldi	r25, 0x3F	; 63
     e00:	08 95       	ret
     e02:	4f e7       	ldi	r20, 0x7F	; 127
     e04:	9f 77       	andi	r25, 0x7F	; 127
     e06:	5f 93       	push	r21
     e08:	4f 93       	push	r20
     e0a:	3f 93       	push	r19
     e0c:	2f 93       	push	r18
     e0e:	0e 94 3b 08 	call	0x1076	; 0x1076 <log>
     e12:	2f 91       	pop	r18
     e14:	3f 91       	pop	r19
     e16:	4f 91       	pop	r20
     e18:	5f 91       	pop	r21
     e1a:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3>
     e1e:	0c 94 5f 07 	jmp	0xebe	; 0xebe <exp>
     e22:	19 f4       	brne	.+6      	; 0xe2a <pow+0xa8>
     e24:	16 f4       	brtc	.+4      	; 0xe2a <pow+0xa8>
     e26:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_nan>
     e2a:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_mpack>

00000e2e <sqrt>:
     e2e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__fp_splitA>
     e32:	b8 f3       	brcs	.-18     	; 0xe22 <pow+0xa0>
     e34:	99 23       	and	r25, r25
     e36:	c9 f3       	breq	.-14     	; 0xe2a <pow+0xa8>
     e38:	b6 f3       	brts	.-20     	; 0xe26 <pow+0xa4>
     e3a:	9f 57       	subi	r25, 0x7F	; 127
     e3c:	55 0b       	sbc	r21, r21
     e3e:	87 ff       	sbrs	r24, 7
     e40:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fp_norm2>
     e44:	00 24       	eor	r0, r0
     e46:	a0 e6       	ldi	r26, 0x60	; 96
     e48:	40 ea       	ldi	r20, 0xA0	; 160
     e4a:	90 01       	movw	r18, r0
     e4c:	80 58       	subi	r24, 0x80	; 128
     e4e:	56 95       	lsr	r21
     e50:	97 95       	ror	r25
     e52:	28 f4       	brcc	.+10     	; 0xe5e <sqrt+0x30>
     e54:	80 5c       	subi	r24, 0xC0	; 192
     e56:	66 0f       	add	r22, r22
     e58:	77 1f       	adc	r23, r23
     e5a:	88 1f       	adc	r24, r24
     e5c:	20 f0       	brcs	.+8      	; 0xe66 <sqrt+0x38>
     e5e:	26 17       	cp	r18, r22
     e60:	37 07       	cpc	r19, r23
     e62:	48 07       	cpc	r20, r24
     e64:	30 f4       	brcc	.+12     	; 0xe72 <sqrt+0x44>
     e66:	62 1b       	sub	r22, r18
     e68:	73 0b       	sbc	r23, r19
     e6a:	84 0b       	sbc	r24, r20
     e6c:	20 29       	or	r18, r0
     e6e:	31 29       	or	r19, r1
     e70:	4a 2b       	or	r20, r26
     e72:	a6 95       	lsr	r26
     e74:	17 94       	ror	r1
     e76:	07 94       	ror	r0
     e78:	20 25       	eor	r18, r0
     e7a:	31 25       	eor	r19, r1
     e7c:	4a 27       	eor	r20, r26
     e7e:	58 f7       	brcc	.-42     	; 0xe56 <sqrt+0x28>
     e80:	66 0f       	add	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	88 1f       	adc	r24, r24
     e86:	20 f0       	brcs	.+8      	; 0xe90 <sqrt+0x62>
     e88:	26 17       	cp	r18, r22
     e8a:	37 07       	cpc	r19, r23
     e8c:	48 07       	cpc	r20, r24
     e8e:	30 f4       	brcc	.+12     	; 0xe9c <sqrt+0x6e>
     e90:	62 0b       	sbc	r22, r18
     e92:	73 0b       	sbc	r23, r19
     e94:	84 0b       	sbc	r24, r20
     e96:	20 0d       	add	r18, r0
     e98:	31 1d       	adc	r19, r1
     e9a:	41 1d       	adc	r20, r1
     e9c:	a0 95       	com	r26
     e9e:	81 f7       	brne	.-32     	; 0xe80 <sqrt+0x52>
     ea0:	b9 01       	movw	r22, r18
     ea2:	84 2f       	mov	r24, r20
     ea4:	91 58       	subi	r25, 0x81	; 129
     ea6:	88 0f       	add	r24, r24
     ea8:	96 95       	lsr	r25
     eaa:	87 95       	ror	r24
     eac:	08 95       	ret
     eae:	29 f4       	brne	.+10     	; 0xeba <sqrt+0x8c>
     eb0:	16 f0       	brts	.+4      	; 0xeb6 <sqrt+0x88>
     eb2:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_inf>
     eb6:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__fp_zero>
     eba:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_nan>

00000ebe <exp>:
     ebe:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__fp_splitA>
     ec2:	a8 f3       	brcs	.-22     	; 0xeae <sqrt+0x80>
     ec4:	96 38       	cpi	r25, 0x86	; 134
     ec6:	a0 f7       	brcc	.-24     	; 0xeb0 <sqrt+0x82>
     ec8:	07 f8       	bld	r0, 7
     eca:	0f 92       	push	r0
     ecc:	e8 94       	clt
     ece:	2b e3       	ldi	r18, 0x3B	; 59
     ed0:	3a ea       	ldi	r19, 0xAA	; 170
     ed2:	48 eb       	ldi	r20, 0xB8	; 184
     ed4:	5f e7       	ldi	r21, 0x7F	; 127
     ed6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__mulsf3_pse>
     eda:	0f 92       	push	r0
     edc:	0f 92       	push	r0
     ede:	0f 92       	push	r0
     ee0:	4d b7       	in	r20, 0x3d	; 61
     ee2:	5e b7       	in	r21, 0x3e	; 62
     ee4:	0f 92       	push	r0
     ee6:	0e 94 83 08 	call	0x1106	; 0x1106 <modf>
     eea:	e8 e6       	ldi	r30, 0x68	; 104
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_powser>
     ef2:	4f 91       	pop	r20
     ef4:	5f 91       	pop	r21
     ef6:	ef 91       	pop	r30
     ef8:	ff 91       	pop	r31
     efa:	e5 95       	asr	r30
     efc:	ee 1f       	adc	r30, r30
     efe:	ff 1f       	adc	r31, r31
     f00:	49 f0       	breq	.+18     	; 0xf14 <exp+0x56>
     f02:	fe 57       	subi	r31, 0x7E	; 126
     f04:	e0 68       	ori	r30, 0x80	; 128
     f06:	44 27       	eor	r20, r20
     f08:	ee 0f       	add	r30, r30
     f0a:	44 1f       	adc	r20, r20
     f0c:	fa 95       	dec	r31
     f0e:	e1 f7       	brne	.-8      	; 0xf08 <exp+0x4a>
     f10:	41 95       	neg	r20
     f12:	55 0b       	sbc	r21, r21
     f14:	0e 94 fd 07 	call	0xffa	; 0xffa <ldexp>
     f18:	0f 90       	pop	r0
     f1a:	07 fe       	sbrs	r0, 7
     f1c:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <inverse>
     f20:	08 95       	ret

00000f22 <__fp_cmp>:
     f22:	99 0f       	add	r25, r25
     f24:	00 08       	sbc	r0, r0
     f26:	55 0f       	add	r21, r21
     f28:	aa 0b       	sbc	r26, r26
     f2a:	e0 e8       	ldi	r30, 0x80	; 128
     f2c:	fe ef       	ldi	r31, 0xFE	; 254
     f2e:	16 16       	cp	r1, r22
     f30:	17 06       	cpc	r1, r23
     f32:	e8 07       	cpc	r30, r24
     f34:	f9 07       	cpc	r31, r25
     f36:	c0 f0       	brcs	.+48     	; 0xf68 <__fp_cmp+0x46>
     f38:	12 16       	cp	r1, r18
     f3a:	13 06       	cpc	r1, r19
     f3c:	e4 07       	cpc	r30, r20
     f3e:	f5 07       	cpc	r31, r21
     f40:	98 f0       	brcs	.+38     	; 0xf68 <__fp_cmp+0x46>
     f42:	62 1b       	sub	r22, r18
     f44:	73 0b       	sbc	r23, r19
     f46:	84 0b       	sbc	r24, r20
     f48:	95 0b       	sbc	r25, r21
     f4a:	39 f4       	brne	.+14     	; 0xf5a <__fp_cmp+0x38>
     f4c:	0a 26       	eor	r0, r26
     f4e:	61 f0       	breq	.+24     	; 0xf68 <__fp_cmp+0x46>
     f50:	23 2b       	or	r18, r19
     f52:	24 2b       	or	r18, r20
     f54:	25 2b       	or	r18, r21
     f56:	21 f4       	brne	.+8      	; 0xf60 <__fp_cmp+0x3e>
     f58:	08 95       	ret
     f5a:	0a 26       	eor	r0, r26
     f5c:	09 f4       	brne	.+2      	; 0xf60 <__fp_cmp+0x3e>
     f5e:	a1 40       	sbci	r26, 0x01	; 1
     f60:	a6 95       	lsr	r26
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	81 1d       	adc	r24, r1
     f66:	81 1d       	adc	r24, r1
     f68:	08 95       	ret

00000f6a <__fp_mpack>:
     f6a:	9f 3f       	cpi	r25, 0xFF	; 255
     f6c:	31 f0       	breq	.+12     	; 0xf7a <__fp_mpack_finite+0xc>

00000f6e <__fp_mpack_finite>:
     f6e:	91 50       	subi	r25, 0x01	; 1
     f70:	20 f4       	brcc	.+8      	; 0xf7a <__fp_mpack_finite+0xc>
     f72:	87 95       	ror	r24
     f74:	77 95       	ror	r23
     f76:	67 95       	ror	r22
     f78:	b7 95       	ror	r27
     f7a:	88 0f       	add	r24, r24
     f7c:	91 1d       	adc	r25, r1
     f7e:	96 95       	lsr	r25
     f80:	87 95       	ror	r24
     f82:	97 f9       	bld	r25, 7
     f84:	08 95       	ret

00000f86 <__fp_norm2>:
     f86:	91 50       	subi	r25, 0x01	; 1
     f88:	50 40       	sbci	r21, 0x00	; 0
     f8a:	66 0f       	add	r22, r22
     f8c:	77 1f       	adc	r23, r23
     f8e:	88 1f       	adc	r24, r24
     f90:	d2 f7       	brpl	.-12     	; 0xf86 <__fp_norm2>
     f92:	08 95       	ret

00000f94 <__fp_powser>:
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	1f 93       	push	r17
     f9a:	0f 93       	push	r16
     f9c:	ff 92       	push	r15
     f9e:	ef 92       	push	r14
     fa0:	df 92       	push	r13
     fa2:	7b 01       	movw	r14, r22
     fa4:	8c 01       	movw	r16, r24
     fa6:	68 94       	set
     fa8:	06 c0       	rjmp	.+12     	; 0xfb6 <__fp_powser+0x22>
     faa:	da 2e       	mov	r13, r26
     fac:	ef 01       	movw	r28, r30
     fae:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3x>
     fb2:	fe 01       	movw	r30, r28
     fb4:	e8 94       	clt
     fb6:	a5 91       	lpm	r26, Z+
     fb8:	25 91       	lpm	r18, Z+
     fba:	35 91       	lpm	r19, Z+
     fbc:	45 91       	lpm	r20, Z+
     fbe:	55 91       	lpm	r21, Z+
     fc0:	a6 f3       	brts	.-24     	; 0xfaa <__fp_powser+0x16>
     fc2:	ef 01       	movw	r28, r30
     fc4:	0e 94 c4 04 	call	0x988	; 0x988 <__addsf3x>
     fc8:	fe 01       	movw	r30, r28
     fca:	97 01       	movw	r18, r14
     fcc:	a8 01       	movw	r20, r16
     fce:	da 94       	dec	r13
     fd0:	69 f7       	brne	.-38     	; 0xfac <__fp_powser+0x18>
     fd2:	df 90       	pop	r13
     fd4:	ef 90       	pop	r14
     fd6:	ff 90       	pop	r15
     fd8:	0f 91       	pop	r16
     fda:	1f 91       	pop	r17
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <inverse>:
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	80 e8       	ldi	r24, 0x80	; 128
     fec:	9f e3       	ldi	r25, 0x3F	; 63
     fee:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__divsf3>
     ff2:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_inf>
     ff6:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_mpack>

00000ffa <ldexp>:
     ffa:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__fp_splitA>
     ffe:	d8 f3       	brcs	.-10     	; 0xff6 <inverse+0x14>
    1000:	99 23       	and	r25, r25
    1002:	c9 f3       	breq	.-14     	; 0xff6 <inverse+0x14>
    1004:	94 0f       	add	r25, r20
    1006:	51 1d       	adc	r21, r1
    1008:	a3 f3       	brvs	.-24     	; 0xff2 <inverse+0x10>
    100a:	91 50       	subi	r25, 0x01	; 1
    100c:	50 40       	sbci	r21, 0x00	; 0
    100e:	94 f0       	brlt	.+36     	; 0x1034 <ldexp+0x3a>
    1010:	59 f0       	breq	.+22     	; 0x1028 <ldexp+0x2e>
    1012:	88 23       	and	r24, r24
    1014:	32 f0       	brmi	.+12     	; 0x1022 <ldexp+0x28>
    1016:	66 0f       	add	r22, r22
    1018:	77 1f       	adc	r23, r23
    101a:	88 1f       	adc	r24, r24
    101c:	91 50       	subi	r25, 0x01	; 1
    101e:	50 40       	sbci	r21, 0x00	; 0
    1020:	c1 f7       	brne	.-16     	; 0x1012 <ldexp+0x18>
    1022:	9e 3f       	cpi	r25, 0xFE	; 254
    1024:	51 05       	cpc	r21, r1
    1026:	2c f7       	brge	.-54     	; 0xff2 <inverse+0x10>
    1028:	88 0f       	add	r24, r24
    102a:	91 1d       	adc	r25, r1
    102c:	96 95       	lsr	r25
    102e:	87 95       	ror	r24
    1030:	97 f9       	bld	r25, 7
    1032:	08 95       	ret
    1034:	5f 3f       	cpi	r21, 0xFF	; 255
    1036:	ac f0       	brlt	.+42     	; 0x1062 <ldexp+0x68>
    1038:	98 3e       	cpi	r25, 0xE8	; 232
    103a:	9c f0       	brlt	.+38     	; 0x1062 <ldexp+0x68>
    103c:	bb 27       	eor	r27, r27
    103e:	86 95       	lsr	r24
    1040:	77 95       	ror	r23
    1042:	67 95       	ror	r22
    1044:	b7 95       	ror	r27
    1046:	08 f4       	brcc	.+2      	; 0x104a <ldexp+0x50>
    1048:	b1 60       	ori	r27, 0x01	; 1
    104a:	93 95       	inc	r25
    104c:	c1 f7       	brne	.-16     	; 0x103e <ldexp+0x44>
    104e:	bb 0f       	add	r27, r27
    1050:	58 f7       	brcc	.-42     	; 0x1028 <ldexp+0x2e>
    1052:	11 f4       	brne	.+4      	; 0x1058 <ldexp+0x5e>
    1054:	60 ff       	sbrs	r22, 0
    1056:	e8 cf       	rjmp	.-48     	; 0x1028 <ldexp+0x2e>
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	e3 cf       	rjmp	.-58     	; 0x1028 <ldexp+0x2e>
    1062:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__fp_szero>
    1066:	16 f0       	brts	.+4      	; 0x106c <ldexp+0x72>
    1068:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_mpack>
    106c:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_nan>
    1070:	68 94       	set
    1072:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_inf>

00001076 <log>:
    1076:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__fp_splitA>
    107a:	a8 f3       	brcs	.-22     	; 0x1066 <ldexp+0x6c>
    107c:	99 23       	and	r25, r25
    107e:	c1 f3       	breq	.-16     	; 0x1070 <ldexp+0x76>
    1080:	ae f3       	brts	.-22     	; 0x106c <ldexp+0x72>
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	1f 93       	push	r17
    1088:	0f 93       	push	r16
    108a:	ff 92       	push	r15
    108c:	c9 2f       	mov	r28, r25
    108e:	dd 27       	eor	r29, r29
    1090:	88 23       	and	r24, r24
    1092:	2a f0       	brmi	.+10     	; 0x109e <log+0x28>
    1094:	21 97       	sbiw	r28, 0x01	; 1
    1096:	66 0f       	add	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	da f7       	brpl	.-10     	; 0x1094 <log+0x1e>
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e8       	ldi	r20, 0x80	; 128
    10a4:	5f eb       	ldi	r21, 0xBF	; 191
    10a6:	9f e3       	ldi	r25, 0x3F	; 63
    10a8:	88 39       	cpi	r24, 0x98	; 152
    10aa:	20 f0       	brcs	.+8      	; 0x10b4 <log+0x3e>
    10ac:	80 3e       	cpi	r24, 0xE0	; 224
    10ae:	38 f0       	brcs	.+14     	; 0x10be <log+0x48>
    10b0:	21 96       	adiw	r28, 0x01	; 1
    10b2:	8f 77       	andi	r24, 0x7F	; 127
    10b4:	0e 94 ad 04 	call	0x95a	; 0x95a <__addsf3>
    10b8:	e0 e9       	ldi	r30, 0x90	; 144
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <log+0x50>
    10be:	0e 94 ad 04 	call	0x95a	; 0x95a <__addsf3>
    10c2:	ed eb       	ldi	r30, 0xBD	; 189
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_powser>
    10ca:	8b 01       	movw	r16, r22
    10cc:	be 01       	movw	r22, r28
    10ce:	ec 01       	movw	r28, r24
    10d0:	fb 2e       	mov	r15, r27
    10d2:	6f 57       	subi	r22, 0x7F	; 127
    10d4:	71 09       	sbc	r23, r1
    10d6:	75 95       	asr	r23
    10d8:	77 1f       	adc	r23, r23
    10da:	88 0b       	sbc	r24, r24
    10dc:	99 0b       	sbc	r25, r25
    10de:	0e 94 c3 05 	call	0xb86	; 0xb86 <__floatsisf>
    10e2:	28 e1       	ldi	r18, 0x18	; 24
    10e4:	32 e7       	ldi	r19, 0x72	; 114
    10e6:	41 e3       	ldi	r20, 0x31	; 49
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 67 06 	call	0xcce	; 0xcce <__mulsf3x>
    10ee:	af 2d       	mov	r26, r15
    10f0:	98 01       	movw	r18, r16
    10f2:	ae 01       	movw	r20, r28
    10f4:	ff 90       	pop	r15
    10f6:	0f 91       	pop	r16
    10f8:	1f 91       	pop	r17
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	0e 94 c4 04 	call	0x988	; 0x988 <__addsf3x>
    1102:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_round>

00001106 <modf>:
    1106:	fa 01       	movw	r30, r20
    1108:	dc 01       	movw	r26, r24
    110a:	aa 0f       	add	r26, r26
    110c:	bb 1f       	adc	r27, r27
    110e:	9b 01       	movw	r18, r22
    1110:	ac 01       	movw	r20, r24
    1112:	bf 57       	subi	r27, 0x7F	; 127
    1114:	28 f4       	brcc	.+10     	; 0x1120 <modf+0x1a>
    1116:	22 27       	eor	r18, r18
    1118:	33 27       	eor	r19, r19
    111a:	44 27       	eor	r20, r20
    111c:	50 78       	andi	r21, 0x80	; 128
    111e:	20 c0       	rjmp	.+64     	; 0x1160 <modf+0x5a>
    1120:	b7 51       	subi	r27, 0x17	; 23
    1122:	90 f4       	brcc	.+36     	; 0x1148 <modf+0x42>
    1124:	ab 2f       	mov	r26, r27
    1126:	00 24       	eor	r0, r0
    1128:	46 95       	lsr	r20
    112a:	37 95       	ror	r19
    112c:	27 95       	ror	r18
    112e:	01 1c       	adc	r0, r1
    1130:	a3 95       	inc	r26
    1132:	d2 f3       	brmi	.-12     	; 0x1128 <modf+0x22>
    1134:	00 20       	and	r0, r0
    1136:	71 f0       	breq	.+28     	; 0x1154 <modf+0x4e>
    1138:	22 0f       	add	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	44 1f       	adc	r20, r20
    113e:	b3 95       	inc	r27
    1140:	da f3       	brmi	.-10     	; 0x1138 <modf+0x32>
    1142:	0e d0       	rcall	.+28     	; 0x1160 <modf+0x5a>
    1144:	0c 94 ac 04 	jmp	0x958	; 0x958 <__subsf3>
    1148:	61 30       	cpi	r22, 0x01	; 1
    114a:	71 05       	cpc	r23, r1
    114c:	a0 e8       	ldi	r26, 0x80	; 128
    114e:	8a 07       	cpc	r24, r26
    1150:	b9 46       	sbci	r27, 0x69	; 105
    1152:	30 f4       	brcc	.+12     	; 0x1160 <modf+0x5a>
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	66 27       	eor	r22, r22
    115a:	77 27       	eor	r23, r23
    115c:	88 27       	eor	r24, r24
    115e:	90 78       	andi	r25, 0x80	; 128
    1160:	30 96       	adiw	r30, 0x00	; 0
    1162:	21 f0       	breq	.+8      	; 0x116c <modf+0x66>
    1164:	20 83       	st	Z, r18
    1166:	31 83       	std	Z+1, r19	; 0x01
    1168:	42 83       	std	Z+2, r20	; 0x02
    116a:	53 83       	std	Z+3, r21	; 0x03
    116c:	08 95       	ret

0000116e <vfprintf>:
    116e:	a3 e1       	ldi	r26, 0x13	; 19
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ed eb       	ldi	r30, 0xBD	; 189
    1174:	f8 e0       	ldi	r31, 0x08	; 8
    1176:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__prologue_saves__>
    117a:	6c 01       	movw	r12, r24
    117c:	4b 01       	movw	r8, r22
    117e:	2a 01       	movw	r4, r20
    1180:	fc 01       	movw	r30, r24
    1182:	17 82       	std	Z+7, r1	; 0x07
    1184:	16 82       	std	Z+6, r1	; 0x06
    1186:	83 81       	ldd	r24, Z+3	; 0x03
    1188:	81 ff       	sbrs	r24, 1
    118a:	43 c3       	rjmp	.+1670   	; 0x1812 <vfprintf+0x6a4>
    118c:	ae 01       	movw	r20, r28
    118e:	4f 5f       	subi	r20, 0xFF	; 255
    1190:	5f 4f       	sbci	r21, 0xFF	; 255
    1192:	3a 01       	movw	r6, r20
    1194:	f6 01       	movw	r30, r12
    1196:	93 81       	ldd	r25, Z+3	; 0x03
    1198:	f4 01       	movw	r30, r8
    119a:	93 fd       	sbrc	r25, 3
    119c:	85 91       	lpm	r24, Z+
    119e:	93 ff       	sbrs	r25, 3
    11a0:	81 91       	ld	r24, Z+
    11a2:	4f 01       	movw	r8, r30
    11a4:	88 23       	and	r24, r24
    11a6:	09 f4       	brne	.+2      	; 0x11aa <vfprintf+0x3c>
    11a8:	30 c3       	rjmp	.+1632   	; 0x180a <vfprintf+0x69c>
    11aa:	85 32       	cpi	r24, 0x25	; 37
    11ac:	39 f4       	brne	.+14     	; 0x11bc <vfprintf+0x4e>
    11ae:	93 fd       	sbrc	r25, 3
    11b0:	85 91       	lpm	r24, Z+
    11b2:	93 ff       	sbrs	r25, 3
    11b4:	81 91       	ld	r24, Z+
    11b6:	4f 01       	movw	r8, r30
    11b8:	85 32       	cpi	r24, 0x25	; 37
    11ba:	39 f4       	brne	.+14     	; 0x11ca <vfprintf+0x5c>
    11bc:	b6 01       	movw	r22, r12
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    11c4:	52 01       	movw	r10, r4
    11c6:	25 01       	movw	r4, r10
    11c8:	e5 cf       	rjmp	.-54     	; 0x1194 <vfprintf+0x26>
    11ca:	10 e0       	ldi	r17, 0x00	; 0
    11cc:	f1 2c       	mov	r15, r1
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	20 32       	cpi	r18, 0x20	; 32
    11d2:	a0 f4       	brcc	.+40     	; 0x11fc <vfprintf+0x8e>
    11d4:	8b 32       	cpi	r24, 0x2B	; 43
    11d6:	69 f0       	breq	.+26     	; 0x11f2 <vfprintf+0x84>
    11d8:	30 f4       	brcc	.+12     	; 0x11e6 <vfprintf+0x78>
    11da:	80 32       	cpi	r24, 0x20	; 32
    11dc:	59 f0       	breq	.+22     	; 0x11f4 <vfprintf+0x86>
    11de:	83 32       	cpi	r24, 0x23	; 35
    11e0:	69 f4       	brne	.+26     	; 0x11fc <vfprintf+0x8e>
    11e2:	20 61       	ori	r18, 0x10	; 16
    11e4:	2c c0       	rjmp	.+88     	; 0x123e <vfprintf+0xd0>
    11e6:	8d 32       	cpi	r24, 0x2D	; 45
    11e8:	39 f0       	breq	.+14     	; 0x11f8 <vfprintf+0x8a>
    11ea:	80 33       	cpi	r24, 0x30	; 48
    11ec:	39 f4       	brne	.+14     	; 0x11fc <vfprintf+0x8e>
    11ee:	21 60       	ori	r18, 0x01	; 1
    11f0:	26 c0       	rjmp	.+76     	; 0x123e <vfprintf+0xd0>
    11f2:	22 60       	ori	r18, 0x02	; 2
    11f4:	24 60       	ori	r18, 0x04	; 4
    11f6:	23 c0       	rjmp	.+70     	; 0x123e <vfprintf+0xd0>
    11f8:	28 60       	ori	r18, 0x08	; 8
    11fa:	21 c0       	rjmp	.+66     	; 0x123e <vfprintf+0xd0>
    11fc:	27 fd       	sbrc	r18, 7
    11fe:	27 c0       	rjmp	.+78     	; 0x124e <vfprintf+0xe0>
    1200:	30 ed       	ldi	r19, 0xD0	; 208
    1202:	38 0f       	add	r19, r24
    1204:	3a 30       	cpi	r19, 0x0A	; 10
    1206:	78 f4       	brcc	.+30     	; 0x1226 <vfprintf+0xb8>
    1208:	26 ff       	sbrs	r18, 6
    120a:	06 c0       	rjmp	.+12     	; 0x1218 <vfprintf+0xaa>
    120c:	fa e0       	ldi	r31, 0x0A	; 10
    120e:	1f 9f       	mul	r17, r31
    1210:	30 0d       	add	r19, r0
    1212:	11 24       	eor	r1, r1
    1214:	13 2f       	mov	r17, r19
    1216:	13 c0       	rjmp	.+38     	; 0x123e <vfprintf+0xd0>
    1218:	4a e0       	ldi	r20, 0x0A	; 10
    121a:	f4 9e       	mul	r15, r20
    121c:	30 0d       	add	r19, r0
    121e:	11 24       	eor	r1, r1
    1220:	f3 2e       	mov	r15, r19
    1222:	20 62       	ori	r18, 0x20	; 32
    1224:	0c c0       	rjmp	.+24     	; 0x123e <vfprintf+0xd0>
    1226:	8e 32       	cpi	r24, 0x2E	; 46
    1228:	21 f4       	brne	.+8      	; 0x1232 <vfprintf+0xc4>
    122a:	26 fd       	sbrc	r18, 6
    122c:	ee c2       	rjmp	.+1500   	; 0x180a <vfprintf+0x69c>
    122e:	20 64       	ori	r18, 0x40	; 64
    1230:	06 c0       	rjmp	.+12     	; 0x123e <vfprintf+0xd0>
    1232:	8c 36       	cpi	r24, 0x6C	; 108
    1234:	11 f4       	brne	.+4      	; 0x123a <vfprintf+0xcc>
    1236:	20 68       	ori	r18, 0x80	; 128
    1238:	02 c0       	rjmp	.+4      	; 0x123e <vfprintf+0xd0>
    123a:	88 36       	cpi	r24, 0x68	; 104
    123c:	41 f4       	brne	.+16     	; 0x124e <vfprintf+0xe0>
    123e:	f4 01       	movw	r30, r8
    1240:	93 fd       	sbrc	r25, 3
    1242:	85 91       	lpm	r24, Z+
    1244:	93 ff       	sbrs	r25, 3
    1246:	81 91       	ld	r24, Z+
    1248:	4f 01       	movw	r8, r30
    124a:	81 11       	cpse	r24, r1
    124c:	c1 cf       	rjmp	.-126    	; 0x11d0 <vfprintf+0x62>
    124e:	9b eb       	ldi	r25, 0xBB	; 187
    1250:	98 0f       	add	r25, r24
    1252:	93 30       	cpi	r25, 0x03	; 3
    1254:	18 f4       	brcc	.+6      	; 0x125c <vfprintf+0xee>
    1256:	20 61       	ori	r18, 0x10	; 16
    1258:	80 5e       	subi	r24, 0xE0	; 224
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <vfprintf+0xfa>
    125c:	9b e9       	ldi	r25, 0x9B	; 155
    125e:	98 0f       	add	r25, r24
    1260:	93 30       	cpi	r25, 0x03	; 3
    1262:	08 f0       	brcs	.+2      	; 0x1266 <vfprintf+0xf8>
    1264:	71 c1       	rjmp	.+738    	; 0x1548 <vfprintf+0x3da>
    1266:	2f 7e       	andi	r18, 0xEF	; 239
    1268:	26 ff       	sbrs	r18, 6
    126a:	16 e0       	ldi	r17, 0x06	; 6
    126c:	2f 73       	andi	r18, 0x3F	; 63
    126e:	32 2e       	mov	r3, r18
    1270:	85 36       	cpi	r24, 0x65	; 101
    1272:	19 f4       	brne	.+6      	; 0x127a <vfprintf+0x10c>
    1274:	20 64       	ori	r18, 0x40	; 64
    1276:	32 2e       	mov	r3, r18
    1278:	08 c0       	rjmp	.+16     	; 0x128a <vfprintf+0x11c>
    127a:	86 36       	cpi	r24, 0x66	; 102
    127c:	21 f4       	brne	.+8      	; 0x1286 <vfprintf+0x118>
    127e:	f2 2f       	mov	r31, r18
    1280:	f0 68       	ori	r31, 0x80	; 128
    1282:	3f 2e       	mov	r3, r31
    1284:	02 c0       	rjmp	.+4      	; 0x128a <vfprintf+0x11c>
    1286:	11 11       	cpse	r17, r1
    1288:	11 50       	subi	r17, 0x01	; 1
    128a:	37 fe       	sbrs	r3, 7
    128c:	07 c0       	rjmp	.+14     	; 0x129c <vfprintf+0x12e>
    128e:	1c 33       	cpi	r17, 0x3C	; 60
    1290:	50 f4       	brcc	.+20     	; 0x12a6 <vfprintf+0x138>
    1292:	ee 24       	eor	r14, r14
    1294:	e3 94       	inc	r14
    1296:	e1 0e       	add	r14, r17
    1298:	27 e0       	ldi	r18, 0x07	; 7
    129a:	0b c0       	rjmp	.+22     	; 0x12b2 <vfprintf+0x144>
    129c:	18 30       	cpi	r17, 0x08	; 8
    129e:	38 f0       	brcs	.+14     	; 0x12ae <vfprintf+0x140>
    12a0:	27 e0       	ldi	r18, 0x07	; 7
    12a2:	17 e0       	ldi	r17, 0x07	; 7
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <vfprintf+0x142>
    12a6:	27 e0       	ldi	r18, 0x07	; 7
    12a8:	4c e3       	ldi	r20, 0x3C	; 60
    12aa:	e4 2e       	mov	r14, r20
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <vfprintf+0x144>
    12ae:	21 2f       	mov	r18, r17
    12b0:	e1 2c       	mov	r14, r1
    12b2:	52 01       	movw	r10, r4
    12b4:	44 e0       	ldi	r20, 0x04	; 4
    12b6:	a4 0e       	add	r10, r20
    12b8:	b1 1c       	adc	r11, r1
    12ba:	f2 01       	movw	r30, r4
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	0e 2d       	mov	r16, r14
    12c6:	a3 01       	movw	r20, r6
    12c8:	0e 94 92 0c 	call	0x1924	; 0x1924 <__ftoa_engine>
    12cc:	2c 01       	movw	r4, r24
    12ce:	09 81       	ldd	r16, Y+1	; 0x01
    12d0:	00 ff       	sbrs	r16, 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <vfprintf+0x16a>
    12d4:	03 ff       	sbrs	r16, 3
    12d6:	07 c0       	rjmp	.+14     	; 0x12e6 <vfprintf+0x178>
    12d8:	31 fc       	sbrc	r3, 1
    12da:	08 c0       	rjmp	.+16     	; 0x12ec <vfprintf+0x17e>
    12dc:	32 fe       	sbrs	r3, 2
    12de:	09 c0       	rjmp	.+18     	; 0x12f2 <vfprintf+0x184>
    12e0:	30 e2       	ldi	r19, 0x20	; 32
    12e2:	23 2e       	mov	r2, r19
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <vfprintf+0x186>
    12e6:	2d e2       	ldi	r18, 0x2D	; 45
    12e8:	22 2e       	mov	r2, r18
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <vfprintf+0x186>
    12ec:	9b e2       	ldi	r25, 0x2B	; 43
    12ee:	29 2e       	mov	r2, r25
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <vfprintf+0x186>
    12f2:	21 2c       	mov	r2, r1
    12f4:	80 2f       	mov	r24, r16
    12f6:	8c 70       	andi	r24, 0x0C	; 12
    12f8:	19 f0       	breq	.+6      	; 0x1300 <vfprintf+0x192>
    12fa:	21 10       	cpse	r2, r1
    12fc:	68 c2       	rjmp	.+1232   	; 0x17ce <vfprintf+0x660>
    12fe:	a8 c2       	rjmp	.+1360   	; 0x1850 <vfprintf+0x6e2>
    1300:	37 fe       	sbrs	r3, 7
    1302:	0f c0       	rjmp	.+30     	; 0x1322 <vfprintf+0x1b4>
    1304:	e4 0c       	add	r14, r4
    1306:	04 ff       	sbrs	r16, 4
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <vfprintf+0x1a4>
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	81 33       	cpi	r24, 0x31	; 49
    130e:	09 f4       	brne	.+2      	; 0x1312 <vfprintf+0x1a4>
    1310:	ea 94       	dec	r14
    1312:	1e 14       	cp	r1, r14
    1314:	74 f5       	brge	.+92     	; 0x1372 <vfprintf+0x204>
    1316:	f8 e0       	ldi	r31, 0x08	; 8
    1318:	fe 15       	cp	r31, r14
    131a:	78 f5       	brcc	.+94     	; 0x137a <vfprintf+0x20c>
    131c:	88 e0       	ldi	r24, 0x08	; 8
    131e:	e8 2e       	mov	r14, r24
    1320:	2c c0       	rjmp	.+88     	; 0x137a <vfprintf+0x20c>
    1322:	36 fc       	sbrc	r3, 6
    1324:	2a c0       	rjmp	.+84     	; 0x137a <vfprintf+0x20c>
    1326:	81 2f       	mov	r24, r17
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	84 15       	cp	r24, r4
    132c:	95 05       	cpc	r25, r5
    132e:	9c f0       	brlt	.+38     	; 0x1356 <vfprintf+0x1e8>
    1330:	2c ef       	ldi	r18, 0xFC	; 252
    1332:	42 16       	cp	r4, r18
    1334:	2f ef       	ldi	r18, 0xFF	; 255
    1336:	52 06       	cpc	r5, r18
    1338:	74 f0       	brlt	.+28     	; 0x1356 <vfprintf+0x1e8>
    133a:	43 2d       	mov	r20, r3
    133c:	40 68       	ori	r20, 0x80	; 128
    133e:	34 2e       	mov	r3, r20
    1340:	0a c0       	rjmp	.+20     	; 0x1356 <vfprintf+0x1e8>
    1342:	e2 e0       	ldi	r30, 0x02	; 2
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	ec 0f       	add	r30, r28
    1348:	fd 1f       	adc	r31, r29
    134a:	e1 0f       	add	r30, r17
    134c:	f1 1d       	adc	r31, r1
    134e:	80 81       	ld	r24, Z
    1350:	80 33       	cpi	r24, 0x30	; 48
    1352:	19 f4       	brne	.+6      	; 0x135a <vfprintf+0x1ec>
    1354:	11 50       	subi	r17, 0x01	; 1
    1356:	11 11       	cpse	r17, r1
    1358:	f4 cf       	rjmp	.-24     	; 0x1342 <vfprintf+0x1d4>
    135a:	37 fe       	sbrs	r3, 7
    135c:	0e c0       	rjmp	.+28     	; 0x137a <vfprintf+0x20c>
    135e:	ee 24       	eor	r14, r14
    1360:	e3 94       	inc	r14
    1362:	e1 0e       	add	r14, r17
    1364:	81 2f       	mov	r24, r17
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	48 16       	cp	r4, r24
    136a:	59 06       	cpc	r5, r25
    136c:	2c f4       	brge	.+10     	; 0x1378 <vfprintf+0x20a>
    136e:	14 19       	sub	r17, r4
    1370:	04 c0       	rjmp	.+8      	; 0x137a <vfprintf+0x20c>
    1372:	ee 24       	eor	r14, r14
    1374:	e3 94       	inc	r14
    1376:	01 c0       	rjmp	.+2      	; 0x137a <vfprintf+0x20c>
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	37 fe       	sbrs	r3, 7
    137c:	06 c0       	rjmp	.+12     	; 0x138a <vfprintf+0x21c>
    137e:	14 14       	cp	r1, r4
    1380:	15 04       	cpc	r1, r5
    1382:	34 f4       	brge	.+12     	; 0x1390 <vfprintf+0x222>
    1384:	c2 01       	movw	r24, r4
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <vfprintf+0x226>
    138a:	85 e0       	ldi	r24, 0x05	; 5
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x226>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	21 10       	cpse	r2, r1
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	11 23       	and	r17, r17
    139a:	31 f0       	breq	.+12     	; 0x13a8 <vfprintf+0x23a>
    139c:	21 2f       	mov	r18, r17
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	2f 5f       	subi	r18, 0xFF	; 255
    13a2:	3f 4f       	sbci	r19, 0xFF	; 255
    13a4:	82 0f       	add	r24, r18
    13a6:	93 1f       	adc	r25, r19
    13a8:	2f 2d       	mov	r18, r15
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	82 17       	cp	r24, r18
    13ae:	93 07       	cpc	r25, r19
    13b0:	14 f4       	brge	.+4      	; 0x13b6 <vfprintf+0x248>
    13b2:	f8 1a       	sub	r15, r24
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <vfprintf+0x24a>
    13b6:	f1 2c       	mov	r15, r1
    13b8:	83 2d       	mov	r24, r3
    13ba:	89 70       	andi	r24, 0x09	; 9
    13bc:	49 f4       	brne	.+18     	; 0x13d0 <vfprintf+0x262>
    13be:	ff 20       	and	r15, r15
    13c0:	39 f0       	breq	.+14     	; 0x13d0 <vfprintf+0x262>
    13c2:	b6 01       	movw	r22, r12
    13c4:	80 e2       	ldi	r24, 0x20	; 32
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    13cc:	fa 94       	dec	r15
    13ce:	f7 cf       	rjmp	.-18     	; 0x13be <vfprintf+0x250>
    13d0:	22 20       	and	r2, r2
    13d2:	29 f0       	breq	.+10     	; 0x13de <vfprintf+0x270>
    13d4:	b6 01       	movw	r22, r12
    13d6:	82 2d       	mov	r24, r2
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    13de:	33 fc       	sbrc	r3, 3
    13e0:	09 c0       	rjmp	.+18     	; 0x13f4 <vfprintf+0x286>
    13e2:	ff 20       	and	r15, r15
    13e4:	39 f0       	breq	.+14     	; 0x13f4 <vfprintf+0x286>
    13e6:	b6 01       	movw	r22, r12
    13e8:	80 e3       	ldi	r24, 0x30	; 48
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    13f0:	fa 94       	dec	r15
    13f2:	f7 cf       	rjmp	.-18     	; 0x13e2 <vfprintf+0x274>
    13f4:	37 fe       	sbrs	r3, 7
    13f6:	5a c0       	rjmp	.+180    	; 0x14ac <vfprintf+0x33e>
    13f8:	94 2d       	mov	r25, r4
    13fa:	85 2d       	mov	r24, r5
    13fc:	57 fe       	sbrs	r5, 7
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <vfprintf+0x296>
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	29 2e       	mov	r2, r25
    1406:	38 2e       	mov	r3, r24
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	a2 01       	movw	r20, r4
    140e:	4e 19       	sub	r20, r14
    1410:	51 09       	sbc	r21, r1
    1412:	5d 87       	std	Y+13, r21	; 0x0d
    1414:	4c 87       	std	Y+12, r20	; 0x0c
    1416:	a2 01       	movw	r20, r4
    1418:	42 19       	sub	r20, r2
    141a:	53 09       	sbc	r21, r3
    141c:	5f 87       	std	Y+15, r21	; 0x0f
    141e:	4e 87       	std	Y+14, r20	; 0x0e
    1420:	61 2f       	mov	r22, r17
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	44 27       	eor	r20, r20
    1426:	55 27       	eor	r21, r21
    1428:	46 1b       	sub	r20, r22
    142a:	57 0b       	sbc	r21, r23
    142c:	59 8b       	std	Y+17, r21	; 0x11
    142e:	48 8b       	std	Y+16, r20	; 0x10
    1430:	5f ef       	ldi	r21, 0xFF	; 255
    1432:	25 16       	cp	r2, r21
    1434:	35 06       	cpc	r3, r21
    1436:	49 f4       	brne	.+18     	; 0x144a <vfprintf+0x2dc>
    1438:	b6 01       	movw	r22, r12
    143a:	8e e2       	ldi	r24, 0x2E	; 46
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	2a 8b       	std	Y+18, r18	; 0x12
    1440:	3b 8b       	std	Y+19, r19	; 0x13
    1442:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    1446:	3b 89       	ldd	r19, Y+19	; 0x13
    1448:	2a 89       	ldd	r18, Y+18	; 0x12
    144a:	42 14       	cp	r4, r2
    144c:	53 04       	cpc	r5, r3
    144e:	6c f0       	brlt	.+26     	; 0x146a <vfprintf+0x2fc>
    1450:	4c 85       	ldd	r20, Y+12	; 0x0c
    1452:	5d 85       	ldd	r21, Y+13	; 0x0d
    1454:	42 15       	cp	r20, r2
    1456:	53 05       	cpc	r21, r3
    1458:	44 f4       	brge	.+16     	; 0x146a <vfprintf+0x2fc>
    145a:	ee 85       	ldd	r30, Y+14	; 0x0e
    145c:	ff 85       	ldd	r31, Y+15	; 0x0f
    145e:	e2 0f       	add	r30, r18
    1460:	f3 1f       	adc	r31, r19
    1462:	e6 0d       	add	r30, r6
    1464:	f7 1d       	adc	r31, r7
    1466:	81 81       	ldd	r24, Z+1	; 0x01
    1468:	01 c0       	rjmp	.+2      	; 0x146c <vfprintf+0x2fe>
    146a:	80 e3       	ldi	r24, 0x30	; 48
    146c:	51 e0       	ldi	r21, 0x01	; 1
    146e:	25 1a       	sub	r2, r21
    1470:	31 08       	sbc	r3, r1
    1472:	2f 5f       	subi	r18, 0xFF	; 255
    1474:	3f 4f       	sbci	r19, 0xFF	; 255
    1476:	48 89       	ldd	r20, Y+16	; 0x10
    1478:	59 89       	ldd	r21, Y+17	; 0x11
    147a:	24 16       	cp	r2, r20
    147c:	35 06       	cpc	r3, r21
    147e:	4c f0       	brlt	.+18     	; 0x1492 <vfprintf+0x324>
    1480:	b6 01       	movw	r22, r12
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	2a 8b       	std	Y+18, r18	; 0x12
    1486:	3b 8b       	std	Y+19, r19	; 0x13
    1488:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    148c:	2a 89       	ldd	r18, Y+18	; 0x12
    148e:	3b 89       	ldd	r19, Y+19	; 0x13
    1490:	cf cf       	rjmp	.-98     	; 0x1430 <vfprintf+0x2c2>
    1492:	24 14       	cp	r2, r4
    1494:	35 04       	cpc	r3, r5
    1496:	39 f4       	brne	.+14     	; 0x14a6 <vfprintf+0x338>
    1498:	9a 81       	ldd	r25, Y+2	; 0x02
    149a:	96 33       	cpi	r25, 0x36	; 54
    149c:	18 f4       	brcc	.+6      	; 0x14a4 <vfprintf+0x336>
    149e:	95 33       	cpi	r25, 0x35	; 53
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <vfprintf+0x338>
    14a2:	04 ff       	sbrs	r16, 4
    14a4:	81 e3       	ldi	r24, 0x31	; 49
    14a6:	b6 01       	movw	r22, r12
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	4b c0       	rjmp	.+150    	; 0x1542 <vfprintf+0x3d4>
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	81 33       	cpi	r24, 0x31	; 49
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <vfprintf+0x346>
    14b2:	0f 7e       	andi	r16, 0xEF	; 239
    14b4:	b6 01       	movw	r22, r12
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    14bc:	11 11       	cpse	r17, r1
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <vfprintf+0x35c>
    14c0:	34 fc       	sbrc	r3, 4
    14c2:	18 c0       	rjmp	.+48     	; 0x14f4 <vfprintf+0x386>
    14c4:	85 e6       	ldi	r24, 0x65	; 101
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	17 c0       	rjmp	.+46     	; 0x14f8 <vfprintf+0x38a>
    14ca:	b6 01       	movw	r22, r12
    14cc:	8e e2       	ldi	r24, 0x2E	; 46
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	ee 24       	eor	r14, r14
    14d8:	e3 94       	inc	r14
    14da:	e8 0e       	add	r14, r24
    14dc:	f3 01       	movw	r30, r6
    14de:	e8 0f       	add	r30, r24
    14e0:	f1 1d       	adc	r31, r1
    14e2:	80 81       	ld	r24, Z
    14e4:	b6 01       	movw	r22, r12
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    14ec:	11 50       	subi	r17, 0x01	; 1
    14ee:	8e 2d       	mov	r24, r14
    14f0:	91 f7       	brne	.-28     	; 0x14d6 <vfprintf+0x368>
    14f2:	e6 cf       	rjmp	.-52     	; 0x14c0 <vfprintf+0x352>
    14f4:	85 e4       	ldi	r24, 0x45	; 69
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	b6 01       	movw	r22, r12
    14fa:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    14fe:	57 fc       	sbrc	r5, 7
    1500:	05 c0       	rjmp	.+10     	; 0x150c <vfprintf+0x39e>
    1502:	41 14       	cp	r4, r1
    1504:	51 04       	cpc	r5, r1
    1506:	39 f4       	brne	.+14     	; 0x1516 <vfprintf+0x3a8>
    1508:	04 ff       	sbrs	r16, 4
    150a:	05 c0       	rjmp	.+10     	; 0x1516 <vfprintf+0x3a8>
    150c:	51 94       	neg	r5
    150e:	41 94       	neg	r4
    1510:	51 08       	sbc	r5, r1
    1512:	8d e2       	ldi	r24, 0x2D	; 45
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <vfprintf+0x3aa>
    1516:	8b e2       	ldi	r24, 0x2B	; 43
    1518:	b6 01       	movw	r22, r12
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    1520:	80 e3       	ldi	r24, 0x30	; 48
    1522:	9a e0       	ldi	r25, 0x0A	; 10
    1524:	49 16       	cp	r4, r25
    1526:	51 04       	cpc	r5, r1
    1528:	2c f0       	brlt	.+10     	; 0x1534 <vfprintf+0x3c6>
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	5a e0       	ldi	r21, 0x0A	; 10
    152e:	45 1a       	sub	r4, r21
    1530:	51 08       	sbc	r5, r1
    1532:	f7 cf       	rjmp	.-18     	; 0x1522 <vfprintf+0x3b4>
    1534:	b6 01       	movw	r22, r12
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    153c:	b6 01       	movw	r22, r12
    153e:	c2 01       	movw	r24, r4
    1540:	c0 96       	adiw	r24, 0x30	; 48
    1542:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    1546:	57 c1       	rjmp	.+686    	; 0x17f6 <vfprintf+0x688>
    1548:	83 36       	cpi	r24, 0x63	; 99
    154a:	31 f0       	breq	.+12     	; 0x1558 <vfprintf+0x3ea>
    154c:	83 37       	cpi	r24, 0x73	; 115
    154e:	79 f0       	breq	.+30     	; 0x156e <vfprintf+0x400>
    1550:	83 35       	cpi	r24, 0x53	; 83
    1552:	09 f0       	breq	.+2      	; 0x1556 <vfprintf+0x3e8>
    1554:	58 c0       	rjmp	.+176    	; 0x1606 <vfprintf+0x498>
    1556:	21 c0       	rjmp	.+66     	; 0x159a <vfprintf+0x42c>
    1558:	52 01       	movw	r10, r4
    155a:	e2 e0       	ldi	r30, 0x02	; 2
    155c:	ae 0e       	add	r10, r30
    155e:	b1 1c       	adc	r11, r1
    1560:	f2 01       	movw	r30, r4
    1562:	80 81       	ld	r24, Z
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	01 e0       	ldi	r16, 0x01	; 1
    1568:	10 e0       	ldi	r17, 0x00	; 0
    156a:	23 01       	movw	r4, r6
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <vfprintf+0x428>
    156e:	52 01       	movw	r10, r4
    1570:	f2 e0       	ldi	r31, 0x02	; 2
    1572:	af 0e       	add	r10, r31
    1574:	b1 1c       	adc	r11, r1
    1576:	f2 01       	movw	r30, r4
    1578:	40 80       	ld	r4, Z
    157a:	51 80       	ldd	r5, Z+1	; 0x01
    157c:	26 ff       	sbrs	r18, 6
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <vfprintf+0x418>
    1580:	61 2f       	mov	r22, r17
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	02 c0       	rjmp	.+4      	; 0x158a <vfprintf+0x41c>
    1586:	6f ef       	ldi	r22, 0xFF	; 255
    1588:	7f ef       	ldi	r23, 0xFF	; 255
    158a:	c2 01       	movw	r24, r4
    158c:	2a 8b       	std	Y+18, r18	; 0x12
    158e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <strnlen>
    1592:	8c 01       	movw	r16, r24
    1594:	2a 89       	ldd	r18, Y+18	; 0x12
    1596:	2f 77       	andi	r18, 0x7F	; 127
    1598:	15 c0       	rjmp	.+42     	; 0x15c4 <vfprintf+0x456>
    159a:	52 01       	movw	r10, r4
    159c:	f2 e0       	ldi	r31, 0x02	; 2
    159e:	af 0e       	add	r10, r31
    15a0:	b1 1c       	adc	r11, r1
    15a2:	f2 01       	movw	r30, r4
    15a4:	40 80       	ld	r4, Z
    15a6:	51 80       	ldd	r5, Z+1	; 0x01
    15a8:	26 ff       	sbrs	r18, 6
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <vfprintf+0x444>
    15ac:	61 2f       	mov	r22, r17
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <vfprintf+0x448>
    15b2:	6f ef       	ldi	r22, 0xFF	; 255
    15b4:	7f ef       	ldi	r23, 0xFF	; 255
    15b6:	c2 01       	movw	r24, r4
    15b8:	2a 8b       	std	Y+18, r18	; 0x12
    15ba:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <strnlen_P>
    15be:	8c 01       	movw	r16, r24
    15c0:	2a 89       	ldd	r18, Y+18	; 0x12
    15c2:	20 68       	ori	r18, 0x80	; 128
    15c4:	32 2e       	mov	r3, r18
    15c6:	23 fd       	sbrc	r18, 3
    15c8:	1a c0       	rjmp	.+52     	; 0x15fe <vfprintf+0x490>
    15ca:	8f 2d       	mov	r24, r15
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	08 17       	cp	r16, r24
    15d0:	19 07       	cpc	r17, r25
    15d2:	a8 f4       	brcc	.+42     	; 0x15fe <vfprintf+0x490>
    15d4:	b6 01       	movw	r22, r12
    15d6:	80 e2       	ldi	r24, 0x20	; 32
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    15de:	fa 94       	dec	r15
    15e0:	f4 cf       	rjmp	.-24     	; 0x15ca <vfprintf+0x45c>
    15e2:	f2 01       	movw	r30, r4
    15e4:	37 fc       	sbrc	r3, 7
    15e6:	85 91       	lpm	r24, Z+
    15e8:	37 fe       	sbrs	r3, 7
    15ea:	81 91       	ld	r24, Z+
    15ec:	2f 01       	movw	r4, r30
    15ee:	b6 01       	movw	r22, r12
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    15f6:	f1 10       	cpse	r15, r1
    15f8:	fa 94       	dec	r15
    15fa:	01 50       	subi	r16, 0x01	; 1
    15fc:	11 09       	sbc	r17, r1
    15fe:	01 15       	cp	r16, r1
    1600:	11 05       	cpc	r17, r1
    1602:	79 f7       	brne	.-34     	; 0x15e2 <vfprintf+0x474>
    1604:	f8 c0       	rjmp	.+496    	; 0x17f6 <vfprintf+0x688>
    1606:	84 36       	cpi	r24, 0x64	; 100
    1608:	11 f0       	breq	.+4      	; 0x160e <vfprintf+0x4a0>
    160a:	89 36       	cpi	r24, 0x69	; 105
    160c:	59 f5       	brne	.+86     	; 0x1664 <vfprintf+0x4f6>
    160e:	52 01       	movw	r10, r4
    1610:	27 ff       	sbrs	r18, 7
    1612:	09 c0       	rjmp	.+18     	; 0x1626 <vfprintf+0x4b8>
    1614:	f4 e0       	ldi	r31, 0x04	; 4
    1616:	af 0e       	add	r10, r31
    1618:	b1 1c       	adc	r11, r1
    161a:	f2 01       	movw	r30, r4
    161c:	60 81       	ld	r22, Z
    161e:	71 81       	ldd	r23, Z+1	; 0x01
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	0a c0       	rjmp	.+20     	; 0x163a <vfprintf+0x4cc>
    1626:	f2 e0       	ldi	r31, 0x02	; 2
    1628:	af 0e       	add	r10, r31
    162a:	b1 1c       	adc	r11, r1
    162c:	f2 01       	movw	r30, r4
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	07 2e       	mov	r0, r23
    1634:	00 0c       	add	r0, r0
    1636:	88 0b       	sbc	r24, r24
    1638:	99 0b       	sbc	r25, r25
    163a:	2f 76       	andi	r18, 0x6F	; 111
    163c:	32 2e       	mov	r3, r18
    163e:	97 ff       	sbrs	r25, 7
    1640:	09 c0       	rjmp	.+18     	; 0x1654 <vfprintf+0x4e6>
    1642:	90 95       	com	r25
    1644:	80 95       	com	r24
    1646:	70 95       	com	r23
    1648:	61 95       	neg	r22
    164a:	7f 4f       	sbci	r23, 0xFF	; 255
    164c:	8f 4f       	sbci	r24, 0xFF	; 255
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	20 68       	ori	r18, 0x80	; 128
    1652:	32 2e       	mov	r3, r18
    1654:	2a e0       	ldi	r18, 0x0A	; 10
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	a3 01       	movw	r20, r6
    165a:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__ultoa_invert>
    165e:	e8 2e       	mov	r14, r24
    1660:	e6 18       	sub	r14, r6
    1662:	3f c0       	rjmp	.+126    	; 0x16e2 <vfprintf+0x574>
    1664:	02 2f       	mov	r16, r18
    1666:	85 37       	cpi	r24, 0x75	; 117
    1668:	21 f4       	brne	.+8      	; 0x1672 <vfprintf+0x504>
    166a:	0f 7e       	andi	r16, 0xEF	; 239
    166c:	2a e0       	ldi	r18, 0x0A	; 10
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	1d c0       	rjmp	.+58     	; 0x16ac <vfprintf+0x53e>
    1672:	09 7f       	andi	r16, 0xF9	; 249
    1674:	8f 36       	cpi	r24, 0x6F	; 111
    1676:	91 f0       	breq	.+36     	; 0x169c <vfprintf+0x52e>
    1678:	18 f4       	brcc	.+6      	; 0x1680 <vfprintf+0x512>
    167a:	88 35       	cpi	r24, 0x58	; 88
    167c:	59 f0       	breq	.+22     	; 0x1694 <vfprintf+0x526>
    167e:	c5 c0       	rjmp	.+394    	; 0x180a <vfprintf+0x69c>
    1680:	80 37       	cpi	r24, 0x70	; 112
    1682:	19 f0       	breq	.+6      	; 0x168a <vfprintf+0x51c>
    1684:	88 37       	cpi	r24, 0x78	; 120
    1686:	11 f0       	breq	.+4      	; 0x168c <vfprintf+0x51e>
    1688:	c0 c0       	rjmp	.+384    	; 0x180a <vfprintf+0x69c>
    168a:	00 61       	ori	r16, 0x10	; 16
    168c:	04 ff       	sbrs	r16, 4
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <vfprintf+0x534>
    1690:	04 60       	ori	r16, 0x04	; 4
    1692:	07 c0       	rjmp	.+14     	; 0x16a2 <vfprintf+0x534>
    1694:	24 ff       	sbrs	r18, 4
    1696:	08 c0       	rjmp	.+16     	; 0x16a8 <vfprintf+0x53a>
    1698:	06 60       	ori	r16, 0x06	; 6
    169a:	06 c0       	rjmp	.+12     	; 0x16a8 <vfprintf+0x53a>
    169c:	28 e0       	ldi	r18, 0x08	; 8
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <vfprintf+0x53e>
    16a2:	20 e1       	ldi	r18, 0x10	; 16
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x53e>
    16a8:	20 e1       	ldi	r18, 0x10	; 16
    16aa:	32 e0       	ldi	r19, 0x02	; 2
    16ac:	52 01       	movw	r10, r4
    16ae:	07 ff       	sbrs	r16, 7
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <vfprintf+0x556>
    16b2:	f4 e0       	ldi	r31, 0x04	; 4
    16b4:	af 0e       	add	r10, r31
    16b6:	b1 1c       	adc	r11, r1
    16b8:	f2 01       	movw	r30, r4
    16ba:	60 81       	ld	r22, Z
    16bc:	71 81       	ldd	r23, Z+1	; 0x01
    16be:	82 81       	ldd	r24, Z+2	; 0x02
    16c0:	93 81       	ldd	r25, Z+3	; 0x03
    16c2:	08 c0       	rjmp	.+16     	; 0x16d4 <vfprintf+0x566>
    16c4:	f2 e0       	ldi	r31, 0x02	; 2
    16c6:	af 0e       	add	r10, r31
    16c8:	b1 1c       	adc	r11, r1
    16ca:	f2 01       	movw	r30, r4
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a3 01       	movw	r20, r6
    16d6:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__ultoa_invert>
    16da:	e8 2e       	mov	r14, r24
    16dc:	e6 18       	sub	r14, r6
    16de:	0f 77       	andi	r16, 0x7F	; 127
    16e0:	30 2e       	mov	r3, r16
    16e2:	36 fe       	sbrs	r3, 6
    16e4:	0b c0       	rjmp	.+22     	; 0x16fc <vfprintf+0x58e>
    16e6:	33 2d       	mov	r19, r3
    16e8:	3e 7f       	andi	r19, 0xFE	; 254
    16ea:	e1 16       	cp	r14, r17
    16ec:	50 f4       	brcc	.+20     	; 0x1702 <vfprintf+0x594>
    16ee:	34 fe       	sbrs	r3, 4
    16f0:	0a c0       	rjmp	.+20     	; 0x1706 <vfprintf+0x598>
    16f2:	32 fc       	sbrc	r3, 2
    16f4:	08 c0       	rjmp	.+16     	; 0x1706 <vfprintf+0x598>
    16f6:	33 2d       	mov	r19, r3
    16f8:	3e 7e       	andi	r19, 0xEE	; 238
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <vfprintf+0x598>
    16fc:	0e 2d       	mov	r16, r14
    16fe:	33 2d       	mov	r19, r3
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <vfprintf+0x59a>
    1702:	0e 2d       	mov	r16, r14
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <vfprintf+0x59a>
    1706:	01 2f       	mov	r16, r17
    1708:	34 ff       	sbrs	r19, 4
    170a:	0c c0       	rjmp	.+24     	; 0x1724 <vfprintf+0x5b6>
    170c:	fe 01       	movw	r30, r28
    170e:	ee 0d       	add	r30, r14
    1710:	f1 1d       	adc	r31, r1
    1712:	80 81       	ld	r24, Z
    1714:	80 33       	cpi	r24, 0x30	; 48
    1716:	11 f4       	brne	.+4      	; 0x171c <vfprintf+0x5ae>
    1718:	39 7e       	andi	r19, 0xE9	; 233
    171a:	08 c0       	rjmp	.+16     	; 0x172c <vfprintf+0x5be>
    171c:	32 ff       	sbrs	r19, 2
    171e:	05 c0       	rjmp	.+10     	; 0x172a <vfprintf+0x5bc>
    1720:	0e 5f       	subi	r16, 0xFE	; 254
    1722:	04 c0       	rjmp	.+8      	; 0x172c <vfprintf+0x5be>
    1724:	83 2f       	mov	r24, r19
    1726:	86 78       	andi	r24, 0x86	; 134
    1728:	09 f0       	breq	.+2      	; 0x172c <vfprintf+0x5be>
    172a:	0f 5f       	subi	r16, 0xFF	; 255
    172c:	33 fd       	sbrc	r19, 3
    172e:	13 c0       	rjmp	.+38     	; 0x1756 <vfprintf+0x5e8>
    1730:	30 ff       	sbrs	r19, 0
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <vfprintf+0x5d2>
    1734:	1e 2d       	mov	r17, r14
    1736:	0f 15       	cp	r16, r15
    1738:	18 f4       	brcc	.+6      	; 0x1740 <vfprintf+0x5d2>
    173a:	1f 0d       	add	r17, r15
    173c:	10 1b       	sub	r17, r16
    173e:	0f 2d       	mov	r16, r15
    1740:	0f 15       	cp	r16, r15
    1742:	68 f4       	brcc	.+26     	; 0x175e <vfprintf+0x5f0>
    1744:	b6 01       	movw	r22, r12
    1746:	80 e2       	ldi	r24, 0x20	; 32
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	3b 8b       	std	Y+19, r19	; 0x13
    174c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    1750:	0f 5f       	subi	r16, 0xFF	; 255
    1752:	3b 89       	ldd	r19, Y+19	; 0x13
    1754:	f5 cf       	rjmp	.-22     	; 0x1740 <vfprintf+0x5d2>
    1756:	0f 15       	cp	r16, r15
    1758:	10 f4       	brcc	.+4      	; 0x175e <vfprintf+0x5f0>
    175a:	f0 1a       	sub	r15, r16
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <vfprintf+0x5f2>
    175e:	f1 2c       	mov	r15, r1
    1760:	34 ff       	sbrs	r19, 4
    1762:	12 c0       	rjmp	.+36     	; 0x1788 <vfprintf+0x61a>
    1764:	b6 01       	movw	r22, r12
    1766:	80 e3       	ldi	r24, 0x30	; 48
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	3b 8b       	std	Y+19, r19	; 0x13
    176c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    1770:	3b 89       	ldd	r19, Y+19	; 0x13
    1772:	32 ff       	sbrs	r19, 2
    1774:	17 c0       	rjmp	.+46     	; 0x17a4 <vfprintf+0x636>
    1776:	31 fd       	sbrc	r19, 1
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <vfprintf+0x612>
    177a:	88 e7       	ldi	r24, 0x78	; 120
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <vfprintf+0x616>
    1780:	88 e5       	ldi	r24, 0x58	; 88
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	b6 01       	movw	r22, r12
    1786:	0c c0       	rjmp	.+24     	; 0x17a0 <vfprintf+0x632>
    1788:	83 2f       	mov	r24, r19
    178a:	86 78       	andi	r24, 0x86	; 134
    178c:	59 f0       	breq	.+22     	; 0x17a4 <vfprintf+0x636>
    178e:	31 ff       	sbrs	r19, 1
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <vfprintf+0x628>
    1792:	8b e2       	ldi	r24, 0x2B	; 43
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <vfprintf+0x62a>
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	37 fd       	sbrc	r19, 7
    179a:	8d e2       	ldi	r24, 0x2D	; 45
    179c:	b6 01       	movw	r22, r12
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    17a4:	e1 16       	cp	r14, r17
    17a6:	38 f4       	brcc	.+14     	; 0x17b6 <vfprintf+0x648>
    17a8:	b6 01       	movw	r22, r12
    17aa:	80 e3       	ldi	r24, 0x30	; 48
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    17b2:	11 50       	subi	r17, 0x01	; 1
    17b4:	f7 cf       	rjmp	.-18     	; 0x17a4 <vfprintf+0x636>
    17b6:	ea 94       	dec	r14
    17b8:	f3 01       	movw	r30, r6
    17ba:	ee 0d       	add	r30, r14
    17bc:	f1 1d       	adc	r31, r1
    17be:	80 81       	ld	r24, Z
    17c0:	b6 01       	movw	r22, r12
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    17c8:	e1 10       	cpse	r14, r1
    17ca:	f5 cf       	rjmp	.-22     	; 0x17b6 <vfprintf+0x648>
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <vfprintf+0x688>
    17ce:	f4 e0       	ldi	r31, 0x04	; 4
    17d0:	ff 15       	cp	r31, r15
    17d2:	58 f5       	brcc	.+86     	; 0x182a <vfprintf+0x6bc>
    17d4:	84 e0       	ldi	r24, 0x04	; 4
    17d6:	f8 1a       	sub	r15, r24
    17d8:	33 fe       	sbrs	r3, 3
    17da:	1e c0       	rjmp	.+60     	; 0x1818 <vfprintf+0x6aa>
    17dc:	21 10       	cpse	r2, r1
    17de:	26 c0       	rjmp	.+76     	; 0x182c <vfprintf+0x6be>
    17e0:	03 ff       	sbrs	r16, 3
    17e2:	2a c0       	rjmp	.+84     	; 0x1838 <vfprintf+0x6ca>
    17e4:	0a ee       	ldi	r16, 0xEA	; 234
    17e6:	10 e0       	ldi	r17, 0x00	; 0
    17e8:	f3 2d       	mov	r31, r3
    17ea:	f0 71       	andi	r31, 0x10	; 16
    17ec:	3f 2e       	mov	r3, r31
    17ee:	f8 01       	movw	r30, r16
    17f0:	84 91       	lpm	r24, Z
    17f2:	81 11       	cpse	r24, r1
    17f4:	24 c0       	rjmp	.+72     	; 0x183e <vfprintf+0x6d0>
    17f6:	ff 20       	and	r15, r15
    17f8:	09 f4       	brne	.+2      	; 0x17fc <vfprintf+0x68e>
    17fa:	e5 cc       	rjmp	.-1590   	; 0x11c6 <vfprintf+0x58>
    17fc:	b6 01       	movw	r22, r12
    17fe:	80 e2       	ldi	r24, 0x20	; 32
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    1806:	fa 94       	dec	r15
    1808:	f6 cf       	rjmp	.-20     	; 0x17f6 <vfprintf+0x688>
    180a:	f6 01       	movw	r30, r12
    180c:	86 81       	ldd	r24, Z+6	; 0x06
    180e:	97 81       	ldd	r25, Z+7	; 0x07
    1810:	26 c0       	rjmp	.+76     	; 0x185e <vfprintf+0x6f0>
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	9f ef       	ldi	r25, 0xFF	; 255
    1816:	23 c0       	rjmp	.+70     	; 0x185e <vfprintf+0x6f0>
    1818:	b6 01       	movw	r22, r12
    181a:	80 e2       	ldi	r24, 0x20	; 32
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    1822:	fa 94       	dec	r15
    1824:	f1 10       	cpse	r15, r1
    1826:	f8 cf       	rjmp	.-16     	; 0x1818 <vfprintf+0x6aa>
    1828:	d9 cf       	rjmp	.-78     	; 0x17dc <vfprintf+0x66e>
    182a:	f1 2c       	mov	r15, r1
    182c:	b6 01       	movw	r22, r12
    182e:	82 2d       	mov	r24, r2
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    1836:	d4 cf       	rjmp	.-88     	; 0x17e0 <vfprintf+0x672>
    1838:	0e ee       	ldi	r16, 0xEE	; 238
    183a:	10 e0       	ldi	r17, 0x00	; 0
    183c:	d5 cf       	rjmp	.-86     	; 0x17e8 <vfprintf+0x67a>
    183e:	31 10       	cpse	r3, r1
    1840:	80 52       	subi	r24, 0x20	; 32
    1842:	b6 01       	movw	r22, r12
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <fputc>
    184a:	0f 5f       	subi	r16, 0xFF	; 255
    184c:	1f 4f       	sbci	r17, 0xFF	; 255
    184e:	cf cf       	rjmp	.-98     	; 0x17ee <vfprintf+0x680>
    1850:	23 e0       	ldi	r18, 0x03	; 3
    1852:	2f 15       	cp	r18, r15
    1854:	10 f4       	brcc	.+4      	; 0x185a <vfprintf+0x6ec>
    1856:	83 e0       	ldi	r24, 0x03	; 3
    1858:	be cf       	rjmp	.-132    	; 0x17d6 <vfprintf+0x668>
    185a:	f1 2c       	mov	r15, r1
    185c:	c1 cf       	rjmp	.-126    	; 0x17e0 <vfprintf+0x672>
    185e:	63 96       	adiw	r28, 0x13	; 19
    1860:	e2 e1       	ldi	r30, 0x12	; 18
    1862:	0c 94 63 0c 	jmp	0x18c6	; 0x18c6 <__epilogue_restores__>

00001866 <__divmodhi4>:
    1866:	97 fb       	bst	r25, 7
    1868:	07 2e       	mov	r0, r23
    186a:	16 f4       	brtc	.+4      	; 0x1870 <__divmodhi4+0xa>
    186c:	00 94       	com	r0
    186e:	07 d0       	rcall	.+14     	; 0x187e <__divmodhi4_neg1>
    1870:	77 fd       	sbrc	r23, 7
    1872:	09 d0       	rcall	.+18     	; 0x1886 <__divmodhi4_neg2>
    1874:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__udivmodhi4>
    1878:	07 fc       	sbrc	r0, 7
    187a:	05 d0       	rcall	.+10     	; 0x1886 <__divmodhi4_neg2>
    187c:	3e f4       	brtc	.+14     	; 0x188c <__divmodhi4_exit>

0000187e <__divmodhi4_neg1>:
    187e:	90 95       	com	r25
    1880:	81 95       	neg	r24
    1882:	9f 4f       	sbci	r25, 0xFF	; 255
    1884:	08 95       	ret

00001886 <__divmodhi4_neg2>:
    1886:	70 95       	com	r23
    1888:	61 95       	neg	r22
    188a:	7f 4f       	sbci	r23, 0xFF	; 255

0000188c <__divmodhi4_exit>:
    188c:	08 95       	ret

0000188e <__prologue_saves__>:
    188e:	2f 92       	push	r2
    1890:	3f 92       	push	r3
    1892:	4f 92       	push	r4
    1894:	5f 92       	push	r5
    1896:	6f 92       	push	r6
    1898:	7f 92       	push	r7
    189a:	8f 92       	push	r8
    189c:	9f 92       	push	r9
    189e:	af 92       	push	r10
    18a0:	bf 92       	push	r11
    18a2:	cf 92       	push	r12
    18a4:	df 92       	push	r13
    18a6:	ef 92       	push	r14
    18a8:	ff 92       	push	r15
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	ca 1b       	sub	r28, r26
    18b8:	db 0b       	sbc	r29, r27
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	09 94       	ijmp

000018c6 <__epilogue_restores__>:
    18c6:	2a 88       	ldd	r2, Y+18	; 0x12
    18c8:	39 88       	ldd	r3, Y+17	; 0x11
    18ca:	48 88       	ldd	r4, Y+16	; 0x10
    18cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    18ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    18d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    18d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    18d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    18d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    18d8:	b9 84       	ldd	r11, Y+9	; 0x09
    18da:	c8 84       	ldd	r12, Y+8	; 0x08
    18dc:	df 80       	ldd	r13, Y+7	; 0x07
    18de:	ee 80       	ldd	r14, Y+6	; 0x06
    18e0:	fd 80       	ldd	r15, Y+5	; 0x05
    18e2:	0c 81       	ldd	r16, Y+4	; 0x04
    18e4:	1b 81       	ldd	r17, Y+3	; 0x03
    18e6:	aa 81       	ldd	r26, Y+2	; 0x02
    18e8:	b9 81       	ldd	r27, Y+1	; 0x01
    18ea:	ce 0f       	add	r28, r30
    18ec:	d1 1d       	adc	r29, r1
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	ed 01       	movw	r28, r26
    18fa:	08 95       	ret

000018fc <__udivmodhi4>:
    18fc:	aa 1b       	sub	r26, r26
    18fe:	bb 1b       	sub	r27, r27
    1900:	51 e1       	ldi	r21, 0x11	; 17
    1902:	07 c0       	rjmp	.+14     	; 0x1912 <__udivmodhi4_ep>

00001904 <__udivmodhi4_loop>:
    1904:	aa 1f       	adc	r26, r26
    1906:	bb 1f       	adc	r27, r27
    1908:	a6 17       	cp	r26, r22
    190a:	b7 07       	cpc	r27, r23
    190c:	10 f0       	brcs	.+4      	; 0x1912 <__udivmodhi4_ep>
    190e:	a6 1b       	sub	r26, r22
    1910:	b7 0b       	sbc	r27, r23

00001912 <__udivmodhi4_ep>:
    1912:	88 1f       	adc	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	5a 95       	dec	r21
    1918:	a9 f7       	brne	.-22     	; 0x1904 <__udivmodhi4_loop>
    191a:	80 95       	com	r24
    191c:	90 95       	com	r25
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	08 95       	ret

00001924 <__ftoa_engine>:
    1924:	28 30       	cpi	r18, 0x08	; 8
    1926:	08 f0       	brcs	.+2      	; 0x192a <__ftoa_engine+0x6>
    1928:	27 e0       	ldi	r18, 0x07	; 7
    192a:	33 27       	eor	r19, r19
    192c:	da 01       	movw	r26, r20
    192e:	99 0f       	add	r25, r25
    1930:	31 1d       	adc	r19, r1
    1932:	87 fd       	sbrc	r24, 7
    1934:	91 60       	ori	r25, 0x01	; 1
    1936:	00 96       	adiw	r24, 0x00	; 0
    1938:	61 05       	cpc	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	39 f4       	brne	.+14     	; 0x194c <__ftoa_engine+0x28>
    193e:	32 60       	ori	r19, 0x02	; 2
    1940:	2e 5f       	subi	r18, 0xFE	; 254
    1942:	3d 93       	st	X+, r19
    1944:	30 e3       	ldi	r19, 0x30	; 48
    1946:	2a 95       	dec	r18
    1948:	e1 f7       	brne	.-8      	; 0x1942 <__ftoa_engine+0x1e>
    194a:	08 95       	ret
    194c:	9f 3f       	cpi	r25, 0xFF	; 255
    194e:	30 f0       	brcs	.+12     	; 0x195c <__ftoa_engine+0x38>
    1950:	80 38       	cpi	r24, 0x80	; 128
    1952:	71 05       	cpc	r23, r1
    1954:	61 05       	cpc	r22, r1
    1956:	09 f0       	breq	.+2      	; 0x195a <__ftoa_engine+0x36>
    1958:	3c 5f       	subi	r19, 0xFC	; 252
    195a:	3c 5f       	subi	r19, 0xFC	; 252
    195c:	3d 93       	st	X+, r19
    195e:	91 30       	cpi	r25, 0x01	; 1
    1960:	08 f0       	brcs	.+2      	; 0x1964 <__ftoa_engine+0x40>
    1962:	80 68       	ori	r24, 0x80	; 128
    1964:	91 1d       	adc	r25, r1
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	1f 93       	push	r17
    196c:	0f 93       	push	r16
    196e:	ff 92       	push	r15
    1970:	ef 92       	push	r14
    1972:	19 2f       	mov	r17, r25
    1974:	98 7f       	andi	r25, 0xF8	; 248
    1976:	96 95       	lsr	r25
    1978:	e9 2f       	mov	r30, r25
    197a:	96 95       	lsr	r25
    197c:	96 95       	lsr	r25
    197e:	e9 0f       	add	r30, r25
    1980:	ff 27       	eor	r31, r31
    1982:	e4 5b       	subi	r30, 0xB4	; 180
    1984:	fe 4f       	sbci	r31, 0xFE	; 254
    1986:	99 27       	eor	r25, r25
    1988:	33 27       	eor	r19, r19
    198a:	ee 24       	eor	r14, r14
    198c:	ff 24       	eor	r15, r15
    198e:	a7 01       	movw	r20, r14
    1990:	e7 01       	movw	r28, r14
    1992:	05 90       	lpm	r0, Z+
    1994:	08 94       	sec
    1996:	07 94       	ror	r0
    1998:	28 f4       	brcc	.+10     	; 0x19a4 <__ftoa_engine+0x80>
    199a:	36 0f       	add	r19, r22
    199c:	e7 1e       	adc	r14, r23
    199e:	f8 1e       	adc	r15, r24
    19a0:	49 1f       	adc	r20, r25
    19a2:	51 1d       	adc	r21, r1
    19a4:	66 0f       	add	r22, r22
    19a6:	77 1f       	adc	r23, r23
    19a8:	88 1f       	adc	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	06 94       	lsr	r0
    19ae:	a1 f7       	brne	.-24     	; 0x1998 <__ftoa_engine+0x74>
    19b0:	05 90       	lpm	r0, Z+
    19b2:	07 94       	ror	r0
    19b4:	28 f4       	brcc	.+10     	; 0x19c0 <__ftoa_engine+0x9c>
    19b6:	e7 0e       	add	r14, r23
    19b8:	f8 1e       	adc	r15, r24
    19ba:	49 1f       	adc	r20, r25
    19bc:	56 1f       	adc	r21, r22
    19be:	c1 1d       	adc	r28, r1
    19c0:	77 0f       	add	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	66 1f       	adc	r22, r22
    19c8:	06 94       	lsr	r0
    19ca:	a1 f7       	brne	.-24     	; 0x19b4 <__ftoa_engine+0x90>
    19cc:	05 90       	lpm	r0, Z+
    19ce:	07 94       	ror	r0
    19d0:	28 f4       	brcc	.+10     	; 0x19dc <__ftoa_engine+0xb8>
    19d2:	f8 0e       	add	r15, r24
    19d4:	49 1f       	adc	r20, r25
    19d6:	56 1f       	adc	r21, r22
    19d8:	c7 1f       	adc	r28, r23
    19da:	d1 1d       	adc	r29, r1
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	66 1f       	adc	r22, r22
    19e2:	77 1f       	adc	r23, r23
    19e4:	06 94       	lsr	r0
    19e6:	a1 f7       	brne	.-24     	; 0x19d0 <__ftoa_engine+0xac>
    19e8:	05 90       	lpm	r0, Z+
    19ea:	07 94       	ror	r0
    19ec:	20 f4       	brcc	.+8      	; 0x19f6 <__ftoa_engine+0xd2>
    19ee:	49 0f       	add	r20, r25
    19f0:	56 1f       	adc	r21, r22
    19f2:	c7 1f       	adc	r28, r23
    19f4:	d8 1f       	adc	r29, r24
    19f6:	99 0f       	add	r25, r25
    19f8:	66 1f       	adc	r22, r22
    19fa:	77 1f       	adc	r23, r23
    19fc:	88 1f       	adc	r24, r24
    19fe:	06 94       	lsr	r0
    1a00:	a9 f7       	brne	.-22     	; 0x19ec <__ftoa_engine+0xc8>
    1a02:	84 91       	lpm	r24, Z
    1a04:	10 95       	com	r17
    1a06:	17 70       	andi	r17, 0x07	; 7
    1a08:	41 f0       	breq	.+16     	; 0x1a1a <__ftoa_engine+0xf6>
    1a0a:	d6 95       	lsr	r29
    1a0c:	c7 95       	ror	r28
    1a0e:	57 95       	ror	r21
    1a10:	47 95       	ror	r20
    1a12:	f7 94       	ror	r15
    1a14:	e7 94       	ror	r14
    1a16:	1a 95       	dec	r17
    1a18:	c1 f7       	brne	.-16     	; 0x1a0a <__ftoa_engine+0xe6>
    1a1a:	e2 ef       	ldi	r30, 0xF2	; 242
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	68 94       	set
    1a20:	15 90       	lpm	r1, Z+
    1a22:	15 91       	lpm	r17, Z+
    1a24:	35 91       	lpm	r19, Z+
    1a26:	65 91       	lpm	r22, Z+
    1a28:	95 91       	lpm	r25, Z+
    1a2a:	05 90       	lpm	r0, Z+
    1a2c:	7f e2       	ldi	r23, 0x2F	; 47
    1a2e:	73 95       	inc	r23
    1a30:	e1 18       	sub	r14, r1
    1a32:	f1 0a       	sbc	r15, r17
    1a34:	43 0b       	sbc	r20, r19
    1a36:	56 0b       	sbc	r21, r22
    1a38:	c9 0b       	sbc	r28, r25
    1a3a:	d0 09       	sbc	r29, r0
    1a3c:	c0 f7       	brcc	.-16     	; 0x1a2e <__ftoa_engine+0x10a>
    1a3e:	e1 0c       	add	r14, r1
    1a40:	f1 1e       	adc	r15, r17
    1a42:	43 1f       	adc	r20, r19
    1a44:	56 1f       	adc	r21, r22
    1a46:	c9 1f       	adc	r28, r25
    1a48:	d0 1d       	adc	r29, r0
    1a4a:	7e f4       	brtc	.+30     	; 0x1a6a <__ftoa_engine+0x146>
    1a4c:	70 33       	cpi	r23, 0x30	; 48
    1a4e:	11 f4       	brne	.+4      	; 0x1a54 <__ftoa_engine+0x130>
    1a50:	8a 95       	dec	r24
    1a52:	e6 cf       	rjmp	.-52     	; 0x1a20 <__ftoa_engine+0xfc>
    1a54:	e8 94       	clt
    1a56:	01 50       	subi	r16, 0x01	; 1
    1a58:	30 f0       	brcs	.+12     	; 0x1a66 <__ftoa_engine+0x142>
    1a5a:	08 0f       	add	r16, r24
    1a5c:	0a f4       	brpl	.+2      	; 0x1a60 <__ftoa_engine+0x13c>
    1a5e:	00 27       	eor	r16, r16
    1a60:	02 17       	cp	r16, r18
    1a62:	08 f4       	brcc	.+2      	; 0x1a66 <__ftoa_engine+0x142>
    1a64:	20 2f       	mov	r18, r16
    1a66:	23 95       	inc	r18
    1a68:	02 2f       	mov	r16, r18
    1a6a:	7a 33       	cpi	r23, 0x3A	; 58
    1a6c:	28 f0       	brcs	.+10     	; 0x1a78 <__ftoa_engine+0x154>
    1a6e:	79 e3       	ldi	r23, 0x39	; 57
    1a70:	7d 93       	st	X+, r23
    1a72:	2a 95       	dec	r18
    1a74:	e9 f7       	brne	.-6      	; 0x1a70 <__ftoa_engine+0x14c>
    1a76:	10 c0       	rjmp	.+32     	; 0x1a98 <__ftoa_engine+0x174>
    1a78:	7d 93       	st	X+, r23
    1a7a:	2a 95       	dec	r18
    1a7c:	89 f6       	brne	.-94     	; 0x1a20 <__ftoa_engine+0xfc>
    1a7e:	06 94       	lsr	r0
    1a80:	97 95       	ror	r25
    1a82:	67 95       	ror	r22
    1a84:	37 95       	ror	r19
    1a86:	17 95       	ror	r17
    1a88:	17 94       	ror	r1
    1a8a:	e1 18       	sub	r14, r1
    1a8c:	f1 0a       	sbc	r15, r17
    1a8e:	43 0b       	sbc	r20, r19
    1a90:	56 0b       	sbc	r21, r22
    1a92:	c9 0b       	sbc	r28, r25
    1a94:	d0 09       	sbc	r29, r0
    1a96:	98 f0       	brcs	.+38     	; 0x1abe <__ftoa_engine+0x19a>
    1a98:	23 95       	inc	r18
    1a9a:	7e 91       	ld	r23, -X
    1a9c:	73 95       	inc	r23
    1a9e:	7a 33       	cpi	r23, 0x3A	; 58
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <__ftoa_engine+0x180>
    1aa2:	70 e3       	ldi	r23, 0x30	; 48
    1aa4:	7c 93       	st	X, r23
    1aa6:	20 13       	cpse	r18, r16
    1aa8:	b8 f7       	brcc	.-18     	; 0x1a98 <__ftoa_engine+0x174>
    1aaa:	7e 91       	ld	r23, -X
    1aac:	70 61       	ori	r23, 0x10	; 16
    1aae:	7d 93       	st	X+, r23
    1ab0:	30 f0       	brcs	.+12     	; 0x1abe <__ftoa_engine+0x19a>
    1ab2:	83 95       	inc	r24
    1ab4:	71 e3       	ldi	r23, 0x31	; 49
    1ab6:	7d 93       	st	X+, r23
    1ab8:	70 e3       	ldi	r23, 0x30	; 48
    1aba:	2a 95       	dec	r18
    1abc:	e1 f7       	brne	.-8      	; 0x1ab6 <__ftoa_engine+0x192>
    1abe:	11 24       	eor	r1, r1
    1ac0:	ef 90       	pop	r14
    1ac2:	ff 90       	pop	r15
    1ac4:	0f 91       	pop	r16
    1ac6:	1f 91       	pop	r17
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	99 27       	eor	r25, r25
    1ace:	87 fd       	sbrc	r24, 7
    1ad0:	90 95       	com	r25
    1ad2:	08 95       	ret

00001ad4 <strnlen_P>:
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	05 90       	lpm	r0, Z+
    1ad8:	61 50       	subi	r22, 0x01	; 1
    1ada:	70 40       	sbci	r23, 0x00	; 0
    1adc:	01 10       	cpse	r0, r1
    1ade:	d8 f7       	brcc	.-10     	; 0x1ad6 <strnlen_P+0x2>
    1ae0:	80 95       	com	r24
    1ae2:	90 95       	com	r25
    1ae4:	8e 0f       	add	r24, r30
    1ae6:	9f 1f       	adc	r25, r31
    1ae8:	08 95       	ret

00001aea <strnlen>:
    1aea:	fc 01       	movw	r30, r24
    1aec:	61 50       	subi	r22, 0x01	; 1
    1aee:	70 40       	sbci	r23, 0x00	; 0
    1af0:	01 90       	ld	r0, Z+
    1af2:	01 10       	cpse	r0, r1
    1af4:	d8 f7       	brcc	.-10     	; 0x1aec <strnlen+0x2>
    1af6:	80 95       	com	r24
    1af8:	90 95       	com	r25
    1afa:	8e 0f       	add	r24, r30
    1afc:	9f 1f       	adc	r25, r31
    1afe:	08 95       	ret

00001b00 <fputc>:
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	fb 01       	movw	r30, r22
    1b0a:	23 81       	ldd	r18, Z+3	; 0x03
    1b0c:	21 fd       	sbrc	r18, 1
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <fputc+0x16>
    1b10:	8f ef       	ldi	r24, 0xFF	; 255
    1b12:	9f ef       	ldi	r25, 0xFF	; 255
    1b14:	28 c0       	rjmp	.+80     	; 0x1b66 <fputc+0x66>
    1b16:	22 ff       	sbrs	r18, 2
    1b18:	16 c0       	rjmp	.+44     	; 0x1b46 <fputc+0x46>
    1b1a:	46 81       	ldd	r20, Z+6	; 0x06
    1b1c:	57 81       	ldd	r21, Z+7	; 0x07
    1b1e:	24 81       	ldd	r18, Z+4	; 0x04
    1b20:	35 81       	ldd	r19, Z+5	; 0x05
    1b22:	42 17       	cp	r20, r18
    1b24:	53 07       	cpc	r21, r19
    1b26:	44 f4       	brge	.+16     	; 0x1b38 <fputc+0x38>
    1b28:	a0 81       	ld	r26, Z
    1b2a:	b1 81       	ldd	r27, Z+1	; 0x01
    1b2c:	9d 01       	movw	r18, r26
    1b2e:	2f 5f       	subi	r18, 0xFF	; 255
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
    1b32:	31 83       	std	Z+1, r19	; 0x01
    1b34:	20 83       	st	Z, r18
    1b36:	8c 93       	st	X, r24
    1b38:	26 81       	ldd	r18, Z+6	; 0x06
    1b3a:	37 81       	ldd	r19, Z+7	; 0x07
    1b3c:	2f 5f       	subi	r18, 0xFF	; 255
    1b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b40:	37 83       	std	Z+7, r19	; 0x07
    1b42:	26 83       	std	Z+6, r18	; 0x06
    1b44:	10 c0       	rjmp	.+32     	; 0x1b66 <fputc+0x66>
    1b46:	eb 01       	movw	r28, r22
    1b48:	09 2f       	mov	r16, r25
    1b4a:	18 2f       	mov	r17, r24
    1b4c:	00 84       	ldd	r0, Z+8	; 0x08
    1b4e:	f1 85       	ldd	r31, Z+9	; 0x09
    1b50:	e0 2d       	mov	r30, r0
    1b52:	09 95       	icall
    1b54:	89 2b       	or	r24, r25
    1b56:	e1 f6       	brne	.-72     	; 0x1b10 <fputc+0x10>
    1b58:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	9f 83       	std	Y+7, r25	; 0x07
    1b60:	8e 83       	std	Y+6, r24	; 0x06
    1b62:	81 2f       	mov	r24, r17
    1b64:	90 2f       	mov	r25, r16
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	08 95       	ret

00001b70 <__ultoa_invert>:
    1b70:	fa 01       	movw	r30, r20
    1b72:	aa 27       	eor	r26, r26
    1b74:	28 30       	cpi	r18, 0x08	; 8
    1b76:	51 f1       	breq	.+84     	; 0x1bcc <__ultoa_invert+0x5c>
    1b78:	20 31       	cpi	r18, 0x10	; 16
    1b7a:	81 f1       	breq	.+96     	; 0x1bdc <__ultoa_invert+0x6c>
    1b7c:	e8 94       	clt
    1b7e:	6f 93       	push	r22
    1b80:	6e 7f       	andi	r22, 0xFE	; 254
    1b82:	6e 5f       	subi	r22, 0xFE	; 254
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	8f 4f       	sbci	r24, 0xFF	; 255
    1b88:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8a:	af 4f       	sbci	r26, 0xFF	; 255
    1b8c:	b1 e0       	ldi	r27, 0x01	; 1
    1b8e:	3e d0       	rcall	.+124    	; 0x1c0c <__ultoa_invert+0x9c>
    1b90:	b4 e0       	ldi	r27, 0x04	; 4
    1b92:	3c d0       	rcall	.+120    	; 0x1c0c <__ultoa_invert+0x9c>
    1b94:	67 0f       	add	r22, r23
    1b96:	78 1f       	adc	r23, r24
    1b98:	89 1f       	adc	r24, r25
    1b9a:	9a 1f       	adc	r25, r26
    1b9c:	a1 1d       	adc	r26, r1
    1b9e:	68 0f       	add	r22, r24
    1ba0:	79 1f       	adc	r23, r25
    1ba2:	8a 1f       	adc	r24, r26
    1ba4:	91 1d       	adc	r25, r1
    1ba6:	a1 1d       	adc	r26, r1
    1ba8:	6a 0f       	add	r22, r26
    1baa:	71 1d       	adc	r23, r1
    1bac:	81 1d       	adc	r24, r1
    1bae:	91 1d       	adc	r25, r1
    1bb0:	a1 1d       	adc	r26, r1
    1bb2:	20 d0       	rcall	.+64     	; 0x1bf4 <__ultoa_invert+0x84>
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <__ultoa_invert+0x48>
    1bb6:	68 94       	set
    1bb8:	3f 91       	pop	r19
    1bba:	2a e0       	ldi	r18, 0x0A	; 10
    1bbc:	26 9f       	mul	r18, r22
    1bbe:	11 24       	eor	r1, r1
    1bc0:	30 19       	sub	r19, r0
    1bc2:	30 5d       	subi	r19, 0xD0	; 208
    1bc4:	31 93       	st	Z+, r19
    1bc6:	de f6       	brtc	.-74     	; 0x1b7e <__ultoa_invert+0xe>
    1bc8:	cf 01       	movw	r24, r30
    1bca:	08 95       	ret
    1bcc:	46 2f       	mov	r20, r22
    1bce:	47 70       	andi	r20, 0x07	; 7
    1bd0:	40 5d       	subi	r20, 0xD0	; 208
    1bd2:	41 93       	st	Z+, r20
    1bd4:	b3 e0       	ldi	r27, 0x03	; 3
    1bd6:	0f d0       	rcall	.+30     	; 0x1bf6 <__ultoa_invert+0x86>
    1bd8:	c9 f7       	brne	.-14     	; 0x1bcc <__ultoa_invert+0x5c>
    1bda:	f6 cf       	rjmp	.-20     	; 0x1bc8 <__ultoa_invert+0x58>
    1bdc:	46 2f       	mov	r20, r22
    1bde:	4f 70       	andi	r20, 0x0F	; 15
    1be0:	40 5d       	subi	r20, 0xD0	; 208
    1be2:	4a 33       	cpi	r20, 0x3A	; 58
    1be4:	18 f0       	brcs	.+6      	; 0x1bec <__ultoa_invert+0x7c>
    1be6:	49 5d       	subi	r20, 0xD9	; 217
    1be8:	31 fd       	sbrc	r19, 1
    1bea:	40 52       	subi	r20, 0x20	; 32
    1bec:	41 93       	st	Z+, r20
    1bee:	02 d0       	rcall	.+4      	; 0x1bf4 <__ultoa_invert+0x84>
    1bf0:	a9 f7       	brne	.-22     	; 0x1bdc <__ultoa_invert+0x6c>
    1bf2:	ea cf       	rjmp	.-44     	; 0x1bc8 <__ultoa_invert+0x58>
    1bf4:	b4 e0       	ldi	r27, 0x04	; 4
    1bf6:	a6 95       	lsr	r26
    1bf8:	97 95       	ror	r25
    1bfa:	87 95       	ror	r24
    1bfc:	77 95       	ror	r23
    1bfe:	67 95       	ror	r22
    1c00:	ba 95       	dec	r27
    1c02:	c9 f7       	brne	.-14     	; 0x1bf6 <__ultoa_invert+0x86>
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	61 05       	cpc	r22, r1
    1c08:	71 05       	cpc	r23, r1
    1c0a:	08 95       	ret
    1c0c:	9b 01       	movw	r18, r22
    1c0e:	ac 01       	movw	r20, r24
    1c10:	0a 2e       	mov	r0, r26
    1c12:	06 94       	lsr	r0
    1c14:	57 95       	ror	r21
    1c16:	47 95       	ror	r20
    1c18:	37 95       	ror	r19
    1c1a:	27 95       	ror	r18
    1c1c:	ba 95       	dec	r27
    1c1e:	c9 f7       	brne	.-14     	; 0x1c12 <__ultoa_invert+0xa2>
    1c20:	62 0f       	add	r22, r18
    1c22:	73 1f       	adc	r23, r19
    1c24:	84 1f       	adc	r24, r20
    1c26:	95 1f       	adc	r25, r21
    1c28:	a0 1d       	adc	r26, r0
    1c2a:	08 95       	ret

00001c2c <_exit>:
    1c2c:	f8 94       	cli

00001c2e <__stop_program>:
    1c2e:	ff cf       	rjmp	.-2      	; 0x1c2e <__stop_program>
