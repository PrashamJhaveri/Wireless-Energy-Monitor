 --Declare libraries here
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

--Define entity here

-- write other comments here such as last update
entity Datapath is
 port (	
	rx			:	in	std_logic;
	clk		:	in	std_logic;
	S_res 	: 	in std_logic;
	S_en 		:	in std_logic;
	n_en 		: 	in std_logic;
	n_res 	: 	in std_logic;
	sh_en 	: 	in std_logic;
	--digit 	: 	in std_logic_vector(3 downto 0);
	--position	:	in STD_logic_vector(1 downto 0);
	decimal 	:  in std_logic;
	cmp7_s 	:	out std_logic;
	cmp15_s 	:	out std_logic;
	cmp7_n 	:	out std_logic;
	
	ledsegment : out std_logic_vector(7 downto 0);
	ledsel 	:  out std_logic_vector(3 downto 0);
	dataOut 	: 	out std_logic_vector(7 downto 0);
	ss_out 	: 	out std_logic_vector(7 downto 0)
 );
end entity;
 
 
architecture beh of datapath is
signal S : std_logic_vector(3 downto 0);
signal n : std_logic_vector(2 downto 0);
signal b : std_logic_vector(7 downto 0);
signal ss : std_logic_vector(7 downto 0);
signal position	: STD_logic_vector(1 downto 0);
signal digit : std_logic_vector(3 downto 0);

begin
Scounter_process:process(clk) --sensitivity list: write signals input to process)
begin
	if clk'event and clk = '1' then 
		if s_res = '1' then	
		  S <= "0000";
		 elsif S_en = '1' then
			s <= s + 1;
		 end if;
		 
	end if;
		

end process;
ncounter_process: process (clk) --sensitivity list: write signals input to process)
begin
	  if clk'event and clk = '1'  then
			if n_res='1' then
				n <= "000";
			elsif n_en = '1' then
				n <= n + 1;
			end if;
		end if;
--Get help from cs201 lab, EE209 lectures, text books
end process;
-----------------
cmp7_s_process: process(s) --sensitivity list: write signals input to process)
begin
	if s = "0111" then
		cmp7_s <= '1';
	else
		cmp7_s <= '0';
	end if;
end process;	
	--our stuff
cmp7_n_process: process(n) --sensitivity list: write signals input to process)
begin
	if n = "111" then
		cmp7_n <= '1';
	else
		cmp7_n <= '0';	
		
	end if;
end process;

cmp15_process: process(s) --sensitivity list: write signals input to process)
begin
	if s = "1111" then
		cmp15_s <= '1';
	else
		cmp15_s <= '0';	
		
	end if;
end process;
------------------
ShiftRegister_process: process(clk )
begin
	if clk'event and clk = '1' then
		if sh_en = '1' then
			b<= rx & b(7 downto 1); --&= concatenation
		end if;
	end if;
	
			
end process;
dataOut <= b;

digit <= b(3 downto 0);
position <= b(5 downto 4);


-----------------
----//any other code for future
bcd_process: process(digit, ss) --sensitivity list: write signals input to process)
begin
-- --Get help from cs201 lab, EE209 lectures, text books, google
	case digit is
		when"0000"=>
			ss<="00000011"; --0
		when"0001"=>
			ss<="10011111"; --1
		when"0010"=>
			ss<="00100101"; --2
		when"0011"=>
			ss<="00001101"; --3
		when"0100"=>
			ss<="10011001"; --4
		when"0101"=>
			ss<="01001001"; --5
		when"0110"=>
			ss<="01000001"; --6
		when"0111"=>
			ss<="00011111"; --7
		when"1000"=>
			ss<="00000001"; --8
		when"1001"=>
			ss<="00001001"; --9
		when others =>
			ss<="11111111"; --outside scope
	end case;
--	if decimal then
--		ss <= 	"00000011" when digit = "0000" else -- 0
--					"10011111" when digit = "0001" else -- 11111001
 --				 1001" when digit = "0101" else -- 5 0010010
--					"01000001" when digit = "0110" else -- 6 0000010
--					"00011111" when digit = "0111" else -- 7 1111000
--					"00000001" when digit = "1000" else -- 8 0000001
--					"00001001" when digit = "1001" else -- 9 0010000
--					"1111111";
--		else 			
--		ss <= 	"00000011" when digit = "0000" else -- 0
--					"10011111" when digit = "0001" else -- 11111001
--					"00100101" when digit = "0010" else -- 2 0100100
--					"00001101" when digit = "0011" else -- 3 0110000
--					"10011001" when digit = "0100" else -- 4 0011001
--					"01001001" when digit = "0101" else -- 5 0010010
--					"01000001" when digit = "0110" else -- 6 0000010
--					"00011111" when digit = "0111" else -- 7 1111000
--					"00000001" when digit = "1000" else -- 8 0000001
--					"00001001" when digit = "1001" else -- 9 0010000
--					"1111111";
--					
--		end if;
	ledsegment <= ss;

end process;


multiplex_7seg: process(position)
begin
	case position is
		when "00" =>
			ledsel <= "0001";
		when "01" =>
			ledsel <= "0010";
		when "10" =>
			ledsel <= "0100";
		when others =>
			ledsel <= "1000";
	end case;
end process;
end architecture;